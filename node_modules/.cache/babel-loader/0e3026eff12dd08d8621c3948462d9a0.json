{"ast":null,"code":"import _classCallCheck from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/Calendar.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // import Dummy from '../ui/dummys/Dummy';\n\nimport Button from 'ui/buttons/Button'; //import Button1 from 'ui/buttons/Button.1';\n\nimport Select from 'ui/form/Select';\nimport SVGPrevious from 'ui/svg/Previous';\nimport SVGNext from 'ui/svg/Next';\nimport styles from './calendar.scss';\nimport DaysOfWeek from 'mod/daysOfWeek/DaysOfWeek';\nimport CalendarBody from 'mod/calendarBody/CalendarBody'; //import CalendarBodyTest from 'mod/calendarBody/CalendarBodyTest';\n\nimport CalendarHeader from 'mod/calendarHeader/CalendarHeader';\nimport EventBody from 'mod/eventBody/EventBody'; //import GetCurrentDate from 'mod/calendarBody/CalendarBody';\n\n/**\n * General component description in JSDoc format. Markdown is *supported*.\n */\n//   const setPreviousMonthButton = (currentDate) =>{\n//   }\n\nvar monthChoice = [{\n  value: 'january',\n  text: 'January'\n}, {\n  value: 'february',\n  text: 'February'\n}, {\n  value: 'march',\n  text: 'March'\n}, {\n  value: 'april',\n  text: 'April'\n}, {\n  value: 'may',\n  text: 'May'\n}, {\n  value: 'june',\n  text: 'June'\n}, {\n  value: 'july',\n  text: 'July'\n}, {\n  value: 'august',\n  text: 'August'\n}, {\n  value: 'september',\n  text: 'September'\n}, {\n  value: 'october',\n  text: 'October'\n}, {\n  value: 'november',\n  text: 'November'\n}, {\n  value: 'december',\n  text: 'December'\n}];\nvar yearChoice = [{\n  value: 'december',\n  text: '2010'\n}, {\n  value: 'january',\n  text: '2011'\n}, {\n  value: 'february',\n  text: '2012'\n}, {\n  value: 'march',\n  text: '2013'\n}, {\n  value: 'april',\n  text: '2014'\n}, {\n  value: 'may',\n  text: '2015'\n}, {\n  value: 'june',\n  text: '2016'\n}, {\n  value: 'july',\n  text: '2017'\n}, {\n  value: 'august',\n  text: '2018'\n}, {\n  value: 'september',\n  text: '2019'\n}, {\n  value: 'october',\n  text: '2020'\n}, {\n  value: 'november',\n  text: '2021'\n}, {\n  value: 'december',\n  text: '2022'\n}, {\n  value: 'april',\n  text: '2023'\n}, {\n  value: 'may',\n  text: '2024'\n}, {\n  value: 'june',\n  text: '2025'\n}]; // const getPreviousMonthButton = (currentDate) => {\n//     let setPrevMonth = currentDate.getMonth();\n//     let newYear = currentDate.getFullYear();\n//     if (setPrevMonth === 0) {\n//       setPrevMonth = 11;\n//       newYear--;\n//     } else {\n//       setPrevMonth = currentDate.getMonth() - 1;\n//     }\n//     return setPrevMonth;\n//   };\n//   const getNextMonthButton = (currentDate) => {\n//     let setPrevMonth = currentDate.getMonth();\n//     let newYear = currentDate.getFullYear();\n//     if (setPrevMonth === 11) {\n//         newYear++;\n//         setNextMonth = 0;\n//       } else {\n//         setNextMonth = newDate.getMonth() + 1;\n//       }\n//     return setNextMonth;\n//   };\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Calendar, _React$Component);\n\n  function Calendar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Calendar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Calendar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentDate: new Date()\n    };\n    return _this;\n  }\n\n  _createClass(Calendar, [{\n    key: \"setPreviousMonthButton\",\n    value: function setPreviousMonthButton(currentDate) {\n      currentDate.setMonth(currentDate.getMonth() - 1);\n      this.setState({\n        currentDate: currentDate //getPreviousMonthButton(currentDate)\n\n      });\n      console.log(1, currentDate, this.props);\n    }\n  }, {\n    key: \"setNextMonthButton\",\n    value: function setNextMonthButton(currentDate) {\n      currentDate.setMonth(currentDate.getMonth() + 1);\n      this.setState({\n        currentDate: currentDate //getNextMonthButton(currentDate)\n\n      });\n      console.log(2, currentDate, this.props);\n    }\n  }, {\n    key: \"getPreviousMonthButton\",\n    value: function getPreviousMonthButton(currentDate) {\n      var setPrevMonth = currentDate.getMonth();\n      var newYear = currentDate.getFullYear();\n\n      if (setPrevMonth === 0) {\n        setPrevMonth = 11;\n        newYear--;\n      } else {\n        setPrevMonth = currentDate.getMonth() - 1;\n      }\n\n      return setPrevMonth;\n    }\n  }, {\n    key: \"getNextMonthButton\",\n    value: function getNextMonthButton(currentDate) {\n      var setNextMonth = currentDate.getMonth();\n      var newYear = currentDate.getFullYear();\n\n      if (setNextMonth === 11) {\n        newYear++;\n        setNextMonth = 0;\n      } else {\n        setNextMonth = newDate.getMonth() + 1;\n      }\n\n      return setNextMonth;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.calendarHeader,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(CalendarHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })), React.createElement(SVGPrevious, {\n        width: 20,\n        height: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(Button, {\n        text: \"Previous\",\n        onclick: function onclick(event) {\n          return _this2.setPreviousMonthButton(_this2.state.currentDate);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }), React.createElement(Button, {\n        text: \"Next\",\n        onclick: function onclick(event) {\n          return _this2.setNextMonthButton(_this2.state.currentDate);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(SVGNext, {\n        width: 20,\n        height: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(DaysOfWeek, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), React.createElement(CalendarBody, {\n        currentDate: this.state.currentDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Calendar;\n}(React.Component);\n\nCalendar.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string,\n  optionsState: PropTypes.string\n};\nCalendar.defaultProps = {\n  text: 'defaultText',\n  optionsState: 'text'\n};\nexport default Calendar;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/Calendar.jsx"],"names":["React","PropTypes","Button","Select","SVGPrevious","SVGNext","styles","DaysOfWeek","CalendarBody","CalendarHeader","EventBody","monthChoice","value","text","yearChoice","Calendar","state","currentDate","Date","setMonth","getMonth","setState","console","log","props","setPrevMonth","newYear","getFullYear","setNextMonth","newDate","calendarHeader","event","setPreviousMonthButton","setNextMonthButton","Component","propTypes","string","optionsState","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// import Dummy from '../ui/dummys/Dummy';\nimport Button from 'ui/buttons/Button';\n//import Button1 from 'ui/buttons/Button.1';\nimport Select from 'ui/form/Select';\nimport SVGPrevious from 'ui/svg/Previous';\nimport SVGNext from 'ui/svg/Next';\nimport styles from './calendar.scss';\nimport DaysOfWeek from 'mod/daysOfWeek/DaysOfWeek';\nimport CalendarBody from 'mod/calendarBody/CalendarBody';\n//import CalendarBodyTest from 'mod/calendarBody/CalendarBodyTest';\nimport CalendarHeader from 'mod/calendarHeader/CalendarHeader';\nimport EventBody from 'mod/eventBody/EventBody';\n//import GetCurrentDate from 'mod/calendarBody/CalendarBody';\n\n\n/**\n * General component description in JSDoc format. Markdown is *supported*.\n */\n\n//   const setPreviousMonthButton = (currentDate) =>{\n      \n//   }\nconst monthChoice = [\n    { value: 'january', text: 'January' },\n    { value: 'february', text: 'February' },\n    { value: 'march', text: 'March' },\n    { value: 'april', text: 'April' },\n    { value: 'may', text: 'May' },\n    { value: 'june', text: 'June' },\n    { value: 'july', text: 'July' },\n    { value: 'august', text: 'August' },\n    { value: 'september', text: 'September' },\n    { value: 'october', text: 'October' },\n    { value: 'november', text: 'November' },\n    { value: 'december', text: 'December' }\n];\n\nconst yearChoice = [\n    { value: 'december', text: '2010' },\n    { value: 'january', text: '2011' },\n    { value: 'february', text: '2012' },\n    { value: 'march', text: '2013' },\n    { value: 'april', text: '2014' },\n    { value: 'may', text: '2015' },\n    { value: 'june', text: '2016' },\n    { value: 'july', text: '2017' },\n    { value: 'august', text: '2018' },\n    { value: 'september', text: '2019' },\n    { value: 'october', text: '2020' },\n    { value: 'november', text: '2021' },\n    { value: 'december', text: '2022' },\n    { value: 'april', text: '2023' },\n    { value: 'may', text: '2024' },\n    { value: 'june', text: '2025' }\n];\n// const getPreviousMonthButton = (currentDate) => {\n//     let setPrevMonth = currentDate.getMonth();\n//     let newYear = currentDate.getFullYear();\n  \n//     if (setPrevMonth === 0) {\n//       setPrevMonth = 11;\n//       newYear--;\n//     } else {\n//       setPrevMonth = currentDate.getMonth() - 1;\n//     }\n//     return setPrevMonth;\n//   };\n\n//   const getNextMonthButton = (currentDate) => {\n//     let setPrevMonth = currentDate.getMonth();\n//     let newYear = currentDate.getFullYear();\n  \n//     if (setPrevMonth === 11) {\n//         newYear++;\n//         setNextMonth = 0;\n//       } else {\n//         setNextMonth = newDate.getMonth() + 1;\n//       }\n//     return setNextMonth;\n\n//   };\n  \nclass Calendar extends React.Component {\n    static propTypes = {\n        /** Description of prop \"text\". */\n        text: PropTypes.string,\n        optionsState: PropTypes.string\n    };\n    \n static defaultProps = {\n        text: 'defaultText',\n        optionsState: 'text'\n    };\n\n    state= {\n        currentDate:  new Date()\n    }\n\n    setPreviousMonthButton (currentDate) {\n       currentDate.setMonth(currentDate.getMonth() - 1)\n        this.setState ( {\n          currentDate: currentDate\n          //getPreviousMonthButton(currentDate)\n         }\n         )\n      console.log(1, currentDate, this.props);\n    }\n\n    setNextMonthButton (currentDate) {\n        currentDate.setMonth(currentDate.getMonth() + 1)\n        this.setState ( {\n          currentDate: currentDate\n          //getNextMonthButton(currentDate)\n         }\n  \n         )\n       console.log(2, currentDate, this.props);\n     }\n\n   getPreviousMonthButton (currentDate)  {\n        let setPrevMonth = currentDate.getMonth();\n        let newYear = currentDate.getFullYear();\n      \n        if (setPrevMonth === 0) {\n          setPrevMonth = 11;\n          newYear--;\n        } else {\n          setPrevMonth = currentDate.getMonth() - 1;\n        }\n        return setPrevMonth;\n      };\n    getNextMonthButton (currentDate) {\n        let setNextMonth = currentDate.getMonth();\n        let newYear = currentDate.getFullYear();\n      \n        if (setNextMonth === 11) {\n            newYear++;\n            setNextMonth = 0;\n          } else {\n            setNextMonth = newDate.getMonth() + 1;\n          }\n        return setNextMonth;\n    \n      };\n\n    render ()\n{\n    return (\n        <div>\n             <div className={styles.calendarHeader}><CalendarHeader  /></div> \n    \n          {/* <div>\n                <Button text=\"Month\" />\n                <Button text=\"Week\" />\n                <Button text=\"Day\" />\n            </div>\n    \n           <Select options={monthChoice} />\n            <Select options={yearChoice} /> */}\n            <SVGPrevious width={20} height={10} />\n            <Button text=\"Previous\" onclick={(event)=>this.setPreviousMonthButton (this.state.currentDate)} />\n            <Button text=\"Next\" onclick={(event)=>this.setNextMonthButton (this.state.currentDate)} />\n            <SVGNext width={20} height={10} /> \n             {/* <Button text=\"Previous\" />\n            {/* <Button1 text=\"Previous\" />\n             <Button1 text=\"Next\" />  */} \n            {/* <Button text=\"Next\" />  */}\n            <DaysOfWeek />\n            <CalendarBody currentDate={this.state.currentDate}/>\n          \n    \n            {/* <EventBody /> */}\n        </div>\n    );\n}\n }\n\n\n\n\n\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}