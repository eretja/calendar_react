{"ast":null,"code":"// import React from 'react';\n// import PropTypes from 'prop-types';\n// import styles from './calendarBody.scss';\n// class CalendarBodyTest extends React.Component {\n//     constructor(props) {\n//        super(props);\n//       let newDate = new Date();\n//        this.state = {\n//               currentMonth: newDate.getMonth(), \n//                 currentYear: newDate.getFullYear()\n//     }\n//  let getDaysInMonth = function( month, year ) {\n//     return new Date( year, month, 0 ).getDate();\n//  };\n//  let daysInMonth = getDaysInMonth(\n//     this.state.currentMonth + 1,\n//    this.state.currentYear\n//  );\n//  let firstDayOfWeek = new Date(\n//      this.state.currentYear,\n//      this.state.currentMonth ).getDay();\n//  let lastDay = new Date( this.state.currentYear,  this.state.currentMonth, 0 ).getDate();\n//     let day = 1;\n//     let dayOfNextMonth = 0;\n//     let cellText;\n//         let td = [];\n//         const baseDayClass = 'basis class';\n//             for ( let y = 0; y < 7; y++ ) {\n//             let dayClass = baseDayClass;\n//             if ( i === 0 && y < firstDayOfWeek - 1  ) {\n//                 cellText = lastDay - firstDayOfWeek + 2 + y;\n//             } else if ( day >= daysInMonth ) {\n//                 dayOfNextMonth++;\n//                 cellText = day;\n//                 day = dayOfNextMonth;\n//             } else {\n//                cellText = day;\n//                 if (  day === newDate.getDate() &&\n//                 this.state.currentYear === newDate.getFullYear() &&\n//                 this.state.currentMonth === newDate.getMonth() ) {\n//                     //day;\n//                     dayClass += ' ' + styles.actualDate;\n//                 }\n//                 //cellText = day;\n//                 day++;\n//             }\n//             td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n//         }\n//         return td;\n//         let tr = [];\n//         for ( let i = 0; i < 6; i++ ) {\n//             tr.push( <tr key={i}>{tds( i )}</tr> );\n//         }\n//         return   tr;\n//   }\n//   render() {\n//     return (\n//      <div className=\"calendarBody\">\n//          <div>\n//              <table>\n//                  <tbody>\n//                      {this.props.tr }\n//                  </tbody>\n//              </table>\n//          </div>\n//      </div>\n//  );\n// };\n// }\n// CalendarBodyTest.propTypes = {\n//  /** Description of prop \"text\". */\n//  text: PropTypes.string\n// };\n// CalendarBodyTest.defaultProps = {\n//  text: 'defaultText'\n// };\n// export default CalendarBodyTest;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBodyTest.jsx"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["// import React from 'react';\n// import PropTypes from 'prop-types';\n// import styles from './calendarBody.scss';\n\n// class CalendarBodyTest extends React.Component {\n//     constructor(props) {\n//        super(props);\n//       let newDate = new Date();\n//        this.state = {\n//               currentMonth: newDate.getMonth(), \n//                 currentYear: newDate.getFullYear()\n\n//     }\n\n//  let getDaysInMonth = function( month, year ) {\n//     return new Date( year, month, 0 ).getDate();\n//  };\n\n//  let daysInMonth = getDaysInMonth(\n//     this.state.currentMonth + 1,\n//    this.state.currentYear\n//  );\n\n//  let firstDayOfWeek = new Date(\n//      this.state.currentYear,\n//      this.state.currentMonth ).getDay();\n\n\n//  let lastDay = new Date( this.state.currentYear,  this.state.currentMonth, 0 ).getDate();\n//     let day = 1;\n//     let dayOfNextMonth = 0;\n//     let cellText;\n//         let td = [];\n//         const baseDayClass = 'basis class';\n//             for ( let y = 0; y < 7; y++ ) {\n//             let dayClass = baseDayClass;\n//             if ( i === 0 && y < firstDayOfWeek - 1  ) {\n//                 cellText = lastDay - firstDayOfWeek + 2 + y;\n//             } else if ( day >= daysInMonth ) {\n//                 dayOfNextMonth++;\n//                 cellText = day;\n//                 day = dayOfNextMonth;\n//             } else {\n//                cellText = day;\n//                 if (  day === newDate.getDate() &&\n//                 this.state.currentYear === newDate.getFullYear() &&\n//                 this.state.currentMonth === newDate.getMonth() ) {\n//                     //day;\n//                     dayClass += ' ' + styles.actualDate;\n//                 }\n//                 //cellText = day;\n//                 day++;\n//             }\n//             td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n//         }\n//         return td;\n   \n//         let tr = [];\n//         for ( let i = 0; i < 6; i++ ) {\n//             tr.push( <tr key={i}>{tds( i )}</tr> );\n//         }\n//         return   tr;\n   \n\n//   }\n\n//   render() {\n//     return (\n\n//      <div className=\"calendarBody\">\n//          <div>\n//              <table>\n//                  <tbody>\n//                      {this.props.tr }\n//                  </tbody>\n//              </table>\n//          </div>\n//      </div>\n//  );\n// };\n// }\n\n// CalendarBodyTest.propTypes = {\n//  /** Description of prop \"text\". */\n\n//  text: PropTypes.string\n// };\n\n// CalendarBodyTest.defaultProps = {\n//  text: 'defaultText'\n// };\n\n// export default CalendarBodyTest;\n"]},"metadata":{},"sourceType":"module"}