{"ast":null,"code":"import _classCallCheck from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBodyTest.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\n\nvar CalendarBodyTest =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CalendarBodyTest, _React$Component);\n\n  function CalendarBodyTest(props) {\n    var _this;\n\n    _classCallCheck(this, CalendarBodyTest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalendarBodyTest).call(this, props));\n    var newDate = new Date();\n    _this.state = {\n      currentMonth: newDate.getMonth(),\n      currentYear: newDate.getFullYear()\n    };\n\n    var getDaysInMonth = function getDaysInMonth(month, year) {\n      return new Date(year, month, 0).getDate();\n    };\n\n    var daysInMonth = getDaysInMonth(_this.state.currentMonth + 1, _this.state.currentYear);\n    var firstDayOfWeek = new Date(_this.state.currentYear, _this.state.currentMonth).getDay();\n    var lastDay = new Date(_this.state.currentYear, _this.state.currentMonth, 0).getDate();\n    var currentDay = 1;\n    var dayOfNextMonth = 0;\n    var cellText;\n\n    for (var i = 0; i < 6 && currentDay <= daysInMonth; i++) {\n      var dayClass = baseDayClass;\n\n      for (var j = 0; j < 7; j++) {\n        tr.push(React.createElement(\"tr\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, td));\n\n        if (i === 0 && j < firstDayOfWeek - 1) {\n          cellText = lastDay - firstDayOfWeek + 2 + j;\n        } else if (currentDay > daysInMonth) {\n          dayOfNextMonth++;\n          cellText = dayOfNextMonth;\n        } else {\n          cellText = currentDay;\n\n          if (currentDay === newDate.getDate() && currentYear === newDate.getFullYear() && currentMonth === newDate.getMonth()) {\n            dayClass += ' ' + styles.actualDate;\n          }\n\n          currentDay++;\n        }\n      }\n\n      td.push(React.createElement(\"td\", {\n        key: y,\n        className: dayClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, cellText));\n    }\n\n    return _this;\n  }\n\n  _createClass(CalendarBodyTest, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"calendarBody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, tr))));\n    }\n  }]);\n\n  return CalendarBodyTest;\n}(React.Component);\n\nCalendarBodyTest.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBodyTest.defaultProps = {\n  text: 'defaultText'\n};\nexport default CalendarBodyTest;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBodyTest.jsx"],"names":["React","PropTypes","styles","CalendarBodyTest","props","newDate","Date","state","currentMonth","getMonth","currentYear","getFullYear","getDaysInMonth","month","year","getDate","daysInMonth","firstDayOfWeek","getDay","lastDay","currentDay","dayOfNextMonth","cellText","i","dayClass","baseDayClass","j","tr","push","td","actualDate","y","Component","propTypes","text","string","defaultProps"],"mappings":"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","sourcesContent":[" import React from 'react';\n import PropTypes from 'prop-types';\n import styles from './calendarBody.scss';\n\n class CalendarBodyTest extends React.Component {\n    constructor(props) {\n       super(props);\n      let newDate = new Date();\n       this.state = {\n              currentMonth: newDate.getMonth(), \n                currentYear: newDate.getFullYear()\n\n    }\n\n let getDaysInMonth = function( month, year ) {\n    return new Date( year, month, 0 ).getDate();\n };\n\n let daysInMonth = getDaysInMonth(\n    this.state.currentMonth + 1,\n   this.state.currentYear\n );\n\n let firstDayOfWeek = new Date(\n     this.state.currentYear,\n     this.state.currentMonth ).getDay();\n\n\n let lastDay = new Date( this.state.currentYear,  this.state.currentMonth, 0 ).getDate();\n\n\n    let  currentDay = 1;\n    let dayOfNextMonth = 0;\n    let cellText;\n  \n\n    for ( let i = 0; i < 6 && currentDay <= daysInMonth; i++ ) {\n        let dayClass = baseDayClass;\n        for ( let j = 0; j < 7; j++ ) {\n            tr.push( <tr key={i}>{td}</tr> );\n\n            if ( i === 0 && j < firstDayOfWeek - 1 ) {\n                cellText = lastDay - firstDayOfWeek + 2 + j;\n            } else if ( currentDay > daysInMonth ) {\n                dayOfNextMonth++;\n                cellText = dayOfNextMonth;\n            } else {\n                cellText = currentDay;\n                if ( currentDay === newDate.getDate() &&\n                 currentYear === newDate.getFullYear() &&\n                  currentMonth === newDate.getMonth() ) {\n                    dayClass += ' ' + styles.actualDate;\n                 }\n\n                currentDay++;\n            }\n  \n        }\n\n        td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n    }\n\n\n  }\n   render() {\n     return (\n\n      <div className=\"calendarBody\">\n          <div>\n              <table>\n              <tbody>\n                        {tr} \n                    </tbody>\n             </table>\n          </div>\n     </div>\n  );\n };\n }\n\nCalendarBodyTest.propTypes = {\n /** Description of prop \"text\". */\n\n  text: PropTypes.string\n };\n\nCalendarBodyTest.defaultProps = {\n  text: 'defaultText'\n };\n export default CalendarBodyTest;\n"]},"metadata":{},"sourceType":"module"}