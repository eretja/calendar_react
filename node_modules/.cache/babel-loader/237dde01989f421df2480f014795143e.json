{"ast":null,"code":"var _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./calendarBody.scss\";\nimport Button from \"ui/buttons/Button\";\n\nvar CalendarBody = function CalendarBody(props) {\n  var _props$state = props.state,\n      year = _props$state.year,\n      month = _props$state.month,\n      date = _props$state.date;\n  var calendarWeeks = [],\n      calendarDays = [];\n  var newDate = new Date();\n  var currentMonth = newDate.getMonth();\n  var currentYear = newDate.getFullYear();\n\n  var getDaysInMonth = function getDaysInMonth(month, year) {\n    return new Date(year, month, 0).getDate();\n  };\n\n  var daysInMonth = new Date(year, month + 1, 0).getDate();\n  var firstDayOfWeek = new Date(year, month).getDay();\n  var lastDay = new Date(currentYear, currentMonth, 0).getDate();\n  var day = 1;\n  var dayOfNextMonth = 0;\n  var cellText;\n\n  var tds = function tds(i, currentDate) {\n    var td = [];\n    var baseDayClass = \"basis class\";\n\n    for (var y = 0; y < 7; y++) {\n      var dayClass = baseDayClass;\n\n      if (i === 0 && y < firstDayOfWeek - 1) {\n        cellText = lastDay - firstDayOfWeek + 2 + y;\n        dayClass += \" \" + styles.calendarNextMonth;\n      } else if (day >= daysInMonth) {\n        dayOfNextMonth++;\n        dayClass += \" \" + styles.calendarNextMonth;\n        cellText = day;\n        day = dayOfNextMonth;\n      } else {\n        cellText = day;\n\n        if (day === currentDate.getDate() && currentYear === currentDate.getFullYear() && currentMonth === currentDate.getMonth()) {\n          dayClass += \" \" + styles.actualDate;\n        }\n\n        day++;\n      } //console.log( i, y, dayClass, typeof dayClass );\n\n\n      td.push(React.createElement(\"td\", {\n        key: y,\n        className: dayClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, cellText));\n    }\n\n    return td;\n  };\n\n  var trs = function trs(currentDate) {\n    var tr = [];\n\n    for (var i = 0; i < 5; i++) {\n      tr.push(React.createElement(\"tr\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, tds(i, currentDate)));\n    }\n\n    return tr;\n  }; //console.log( 'new Date()', new Date(), typeof new Date(), new Date().toISOString() );\n\n\n  return React.createElement(\"div\", {\n    className: \"calendarBody\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, trs(props.currentDate)))));\n}; //}\n\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBody.defaultProps = {\n  text: \"\"\n};\nexport default CalendarBody;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx"],"names":["React","PropTypes","styles","Button","CalendarBody","props","state","year","month","date","calendarWeeks","calendarDays","newDate","Date","currentMonth","getMonth","currentYear","getFullYear","getDaysInMonth","getDate","daysInMonth","firstDayOfWeek","getDay","lastDay","day","dayOfNextMonth","cellText","tds","i","currentDate","td","baseDayClass","y","dayClass","calendarNextMonth","actualDate","push","trs","tr","propTypes","text","string","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./calendarBody.scss\";\nimport Button from \"ui/buttons/Button\";\n\nconst CalendarBody = props => {\n let {year,month,date} = props.state;\n const calendarWeeks = [], calendarDays = [];\n\n\n  let newDate = new Date();\n  let currentMonth = newDate.getMonth();\n  let currentYear = newDate.getFullYear();\n\n  let getDaysInMonth = function(month, year) {\n    return new Date(year, month, 0).getDate();\n  };\n  let daysInMonth = new Date(year, month+1, 0).getDate();\n\n  let firstDayOfWeek = new Date(year, month).getDay();\n\n  let lastDay = new Date(currentYear, currentMonth, 0).getDate();\n  let day = 1;\n  let dayOfNextMonth = 0;\n  let cellText;\n  const tds = (i, currentDate) => {\n    let td = [];\n    const baseDayClass = \"basis class\";\n    for (let y = 0; y < 7; y++) {\n      let dayClass = baseDayClass;\n      if (i === 0 && y < firstDayOfWeek - 1) {\n        cellText = lastDay - firstDayOfWeek + 2 + y;\n        dayClass += \" \" + styles.calendarNextMonth;\n      } else if (day >= daysInMonth) {\n        dayOfNextMonth++;\n        dayClass += \" \" + styles.calendarNextMonth;\n        cellText = day;\n        day = dayOfNextMonth;\n      } else {\n        cellText = day;\n        if (\n          day === currentDate.getDate() &&\n          currentYear === currentDate.getFullYear() &&\n          currentMonth === currentDate.getMonth()\n        ) {\n          dayClass += \" \" + styles.actualDate;\n        }\n        day++;\n      }\n      //console.log( i, y, dayClass, typeof dayClass );\n      td.push(\n        <td key={y} className={dayClass}>\n          {cellText}\n        </td>\n      );\n    }\n    return td;\n  };\n  const trs = currentDate => {\n    let tr = [];\n    for (let i = 0; i < 5; i++) {\n      tr.push(<tr key={i}>{tds(i, currentDate)}</tr>);\n    }\n    return tr;\n  };\n\n  //console.log( 'new Date()', new Date(), typeof new Date(), new Date().toISOString() );\n\n  return (\n    <div className=\"calendarBody\">\n      <div>\n        <table>\n          <tbody>{trs(props.currentDate)}</tbody>\n        </table>\n      </div>\n      {/* <Button text='Add an Event'/>  */}\n    </div>\n  );\n};\n//}\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n\n  text: PropTypes.string\n};\n\nCalendarBody.defaultProps = {\n  text: \"\"\n};\n\nexport default CalendarBody;\n"]},"metadata":{},"sourceType":"module"}