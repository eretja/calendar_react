{"ast":null,"code":"var _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss'; // class CalendarBody extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       let newDate = new Date();\n//       this.state = {\n//               currentMonth: newDate.getMonth(), \n//                 currentYear: newDate.getFullYear()\n//     }\n//     // let currentMonth = newDate.getMonth();\n//     // let currentYear = newDate.getFullYear();\n// let getDaysInMonth = function( month, year ) {\n//    return new Date( year, month, 0 ).getDate();\n// };\n// let daysInMonth = getDaysInMonth(\n//    this.state.currentMonth + 1,\n//   this.state.currentYear\n// );\n// let firstDayOfWeek = new Date(\n//     this.state.currentYear,\n//     this.state.currentMonth ).getDay();\n// let lastDay = new Date( this.state.currentYear,  this.state.currentMonth, 0 ).getDate();\n//    let day = 1;\n//    let dayOfNextMonth = 0;\n//    let cellText;\n//    const tds = ( i )  => {\n//        let td = [];\n//        const baseDayClass = 'basis class';\n//        for ( let y = 0; y < 7; y++ ) {\n//            let dayClass = baseDayClass;\n//            if ( i === 0 && y < firstDayOfWeek - 1  ) {\n//                cellText = lastDay - firstDayOfWeek + 2 + y;\n//            } else if ( day >= daysInMonth ) {\n//                dayOfNextMonth++;\n//                cellText = day;\n//                day = dayOfNextMonth;\n//            } else {\n//                cellText = day;\n//                if (  day === newDate.getDate() &&\n//                this.state.currentYear === newDate.getFullYear() &&\n//                this.state.currentMonth === newDate.getMonth() ) {\n//                    //day;\n//                    dayClass += ' ' + styles.actualDate;\n//                }\n//                //cellText = day;\n//                day++;\n//            }\n//            td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n//        }\n//        return td;\n//    };\n//    const trs = ()  => {\n//        let tr = [];\n//        for ( let i = 0; i < 6/** && day <= daysInMonth*/; i++ ) {\n//            tr.push( <tr key={i}>{tds( i )}</tr> );\n//        }\n//        return   tr;\n//    };\n//   }\n\nvar CalendarBody = function CalendarBody() {\n  var newDate = new Date(); // //   super();\n  // //    this.state = {\n  // //        date: newDate.getDate(),\n  // //        currentMonth: newDate.getMonth(), \n  // //        currentYear: newDate.getFullYear()\n  // //     }\n\n  var date = newDate.getDate();\n  var currentMonth = newDate.getMonth();\n  var currentYear = newDate.getFullYear();\n\n  var getDaysInMonth = function getDaysInMonth(month, year) {\n    return new Date(year, month, 0).getDate();\n  };\n\n  var daysInMonth = getDaysInMonth(\n  /*this.state.*/\n  currentMonth + 1,\n  /*this.state.*/\n  currentYear);\n  var firstDayOfWeek = new Date(\n  /*this.state.*/\n  currentYear,\n  /*this.state.*/\n  currentMonth).getDay();\n  var lastDay = new Date(\n  /*this.state.*/\n  currentYear,\n  /*this.state.*/\n  currentMonth, 0).getDate();\n  var day = 1;\n  var dayOfNextMonth = 0;\n  var cellText;\n\n  var tds = function tds(i) {\n    var td = [];\n    var baseDayClass = 'basis class';\n\n    for (var y = 0; y < 7; y++) {\n      var dayClass = baseDayClass;\n\n      if (i === 0 && y < firstDayOfWeek - 1) {\n        cellText = lastDay - firstDayOfWeek + 2 + y;\n      } else if (day >= daysInMonth) {\n        dayOfNextMonth++;\n        cellText = day;\n        day = dayOfNextMonth;\n      } else {\n        cellText = day;\n\n        if (day === newDate.getDate() &&\n        /*this.state.*/\n        currentYear === newDate.getFullYear() &&\n        /*this.state.*/\n        currentMonth === newDate.getMonth()) {\n          //day;\n          dayClass += ' ' + styles.actualDate;\n        } //cellText = day;\n\n\n        day++;\n      }\n\n      td.push(React.createElement(\"td\", {\n        key: y,\n        className: dayClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, cellText));\n    }\n\n    return td;\n  };\n\n  var trs = function trs() {\n    var tr = [];\n\n    for (var i = 0; i < 6\n    /** && day <= daysInMonth*/\n    ; i++) {\n      tr.push(React.createElement(\"tr\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, tds(i)));\n    }\n\n    return tr;\n  }; //    render() {\n\n\n  return React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, trs()))));\n}; //}\n\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBody.defaultProps = {\n  text: 'defaultText'\n};\nexport default CalendarBody;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx"],"names":["React","PropTypes","styles","CalendarBody","newDate","Date","date","getDate","currentMonth","getMonth","currentYear","getFullYear","getDaysInMonth","month","year","daysInMonth","firstDayOfWeek","getDay","lastDay","day","dayOfNextMonth","cellText","tds","i","td","baseDayClass","y","dayClass","actualDate","push","trs","tr","propTypes","text","string","defaultProps"],"mappings":"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","sourcesContent":["\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\n\n// class CalendarBody extends React.Component {\n//     constructor(props) {\n//       super(props);\n//       let newDate = new Date();\n//       this.state = {\n//               currentMonth: newDate.getMonth(), \n//                 currentYear: newDate.getFullYear()\n\n//     }\n           \n//     // let currentMonth = newDate.getMonth();\n//     // let currentYear = newDate.getFullYear();\n\n// let getDaysInMonth = function( month, year ) {\n//    return new Date( year, month, 0 ).getDate();\n// };\n\n// let daysInMonth = getDaysInMonth(\n//    this.state.currentMonth + 1,\n//   this.state.currentYear\n// );\n\n// let firstDayOfWeek = new Date(\n//     this.state.currentYear,\n//     this.state.currentMonth ).getDay();\n\n\n// let lastDay = new Date( this.state.currentYear,  this.state.currentMonth, 0 ).getDate();\n//    let day = 1;\n//    let dayOfNextMonth = 0;\n//    let cellText;\n//    const tds = ( i )  => {\n//        let td = [];\n//        const baseDayClass = 'basis class';\n//        for ( let y = 0; y < 7; y++ ) {\n//            let dayClass = baseDayClass;\n//            if ( i === 0 && y < firstDayOfWeek - 1  ) {\n//                cellText = lastDay - firstDayOfWeek + 2 + y;\n//            } else if ( day >= daysInMonth ) {\n//                dayOfNextMonth++;\n//                cellText = day;\n//                day = dayOfNextMonth;\n//            } else {\n//                cellText = day;\n//                if (  day === newDate.getDate() &&\n//                this.state.currentYear === newDate.getFullYear() &&\n//                this.state.currentMonth === newDate.getMonth() ) {\n//                    //day;\n//                    dayClass += ' ' + styles.actualDate;\n//                }\n//                //cellText = day;\n//                day++;\n//            }\n//            td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n//        }\n//        return td;\n//    };\n\n//    const trs = ()  => {\n//        let tr = [];\n//        for ( let i = 0; i < 6/** && day <= daysInMonth*/; i++ ) {\n//            tr.push( <tr key={i}>{tds( i )}</tr> );\n//        }\n//        return   tr;\n//    };\n\n//   }\n\n\n const CalendarBody = () => {\n let newDate = new Date();\n// //   super();\n// //    this.state = {\n// //        date: newDate.getDate(),\n// //        currentMonth: newDate.getMonth(), \n// //        currentYear: newDate.getFullYear()\n// //     }\nlet date = newDate.getDate();\n   let currentMonth = newDate.getMonth();\n     let currentYear = newDate.getFullYear();\n\n let getDaysInMonth = function( month, year ) {\n     return new Date( year, month, 0 ).getDate();\n };\n\n let daysInMonth = getDaysInMonth(\n    /*this.state.*/currentMonth + 1,\n    /*this.state.*/currentYear\n);\n\n let firstDayOfWeek = new Date(\n     /*this.state.*/currentYear,\n      /*this.state.*/ currentMonth ).getDay();\n\n\n let lastDay = new Date(  /*this.state.*/currentYear,  /*this.state.*/currentMonth, 0 ).getDate();\n     let day = 1;\n     let dayOfNextMonth = 0;\n     let cellText;\n     const tds = ( i )  => {\n         let td = [];\n         const baseDayClass = 'basis class';\n         for ( let y = 0; y < 7; y++ ) {\n            let dayClass = baseDayClass;\n             if ( i === 0 && y < firstDayOfWeek - 1  ) {\n                 cellText = lastDay - firstDayOfWeek + 2 + y;\n             } else if ( day >= daysInMonth ) {\n                 dayOfNextMonth++;\n                 cellText = day;\n                day = dayOfNextMonth;\n            } else {\n                 cellText = day;\n                 if (  day === newDate.getDate() &&\n                  /*this.state.*/currentYear === newDate.getFullYear() &&\n                  /*this.state.*/currentMonth === newDate.getMonth() ) {\n                     //day;\n                    dayClass += ' ' + styles.actualDate;\n                 }\n                 //cellText = day;\n                 day++;\n             }\n             td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n         }\n         return td;\n     };\n\n     const trs = ()  => {\n         let tr = [];\n         for ( let i = 0; i < 6/** && day <= daysInMonth*/; i++ ) {\n             tr.push( <tr key={i}>{tds( i )}</tr> );\n         }\n         return   tr;\n     };\n\n//    render() {\n       return (\n\n        <div className=\"row\">\n            <div>\n                <table>\n                    <tbody>\n                        {trs() }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n//}\n\nCalendarBody.propTypes = {\n    /** Description of prop \"text\". */\n\n    text: PropTypes.string\n};\n\nCalendarBody.defaultProps = {\n    text: 'defaultText'\n};\n\nexport default CalendarBody;\n"]},"metadata":{},"sourceType":"module"}