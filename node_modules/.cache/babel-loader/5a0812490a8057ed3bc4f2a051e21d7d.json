{"ast":null,"code":"var _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\nimport Button from 'ui/buttons/Button';\n\nvar CalendarBody = function CalendarBody(props) {\n  var newDate = new Date();\n  var currentMonth = newDate.getMonth();\n  var currentYear = newDate.getFullYear();\n\n  var getDaysInMonth = function getDaysInMonth(month, year) {\n    return new Date(year, month, 0).getDate();\n  };\n\n  var daysInMonth = getDaysInMonth(currentMonth + 1, currentYear);\n  var firstDayOfWeek = new Date(currentYear, currentMonth).getDay();\n  var lastDay = new Date(currentYear, currentMonth, 0).getDate();\n  var day = 1;\n  var dayOfNextMonth = 0;\n  var cellText;\n\n  var tds = function tds(i, currentDate) {\n    var td = [];\n    var baseDayClass = 'basis class';\n\n    for (var y = 0; y < 7; y++) {\n      var dayClass = baseDayClass;\n\n      if (i === 0 && y < firstDayOfWeek - 1) {\n        cellText = lastDay - firstDayOfWeek + 2 + y;\n        dayClass += ' ' + styles.calendarNextMonth;\n      } else if (day >= daysInMonth) {\n        dayOfNextMonth++;\n        dayClass += ' ' + styles.calendarNextMonth;\n        cellText = day;\n        day = dayOfNextMonth;\n      } else {\n        cellText = day;\n\n        if (day === currentDate.getDate() && currentYear === currentDate.getFullYear() && currentMonth === currentDate.getMonth()) {\n          dayClass += ' ' + styles.actualDate;\n        }\n\n        day++;\n      }\n\n      td.push(React.createElement(\"td\", {\n        key: y,\n        className: dayClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, cellText));\n    }\n\n    return td;\n  };\n\n  var trs = function trs(currentDate) {\n    var tr = [];\n\n    for (var i = 0; i < 5; i++) {\n      tr.push(React.createElement(\"tr\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, tds(i, currentDate)));\n    }\n\n    return tr;\n  };\n\n  return React.createElement(\"div\", {\n    className: \"calendarBody\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, trs(props.currentDate)))));\n}; //}\n\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBody.defaultProps = {\n  text: ''\n};\nexport default CalendarBody;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx"],"names":["React","PropTypes","styles","Button","CalendarBody","props","newDate","Date","currentMonth","getMonth","currentYear","getFullYear","getDaysInMonth","month","year","getDate","daysInMonth","firstDayOfWeek","getDay","lastDay","day","dayOfNextMonth","cellText","tds","i","currentDate","td","baseDayClass","y","dayClass","calendarNextMonth","actualDate","push","trs","tr","propTypes","text","string","defaultProps"],"mappings":"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","sourcesContent":["\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\nimport Button from 'ui/buttons/Button';\n\nconst CalendarBody = (props) => {\n let newDate = new Date();\n   let currentMonth = newDate.getMonth();\n     let currentYear = newDate.getFullYear();\n\n let getDaysInMonth = function( month, year ) {\n     return new Date( year, month, 0 ).getDate();\n };\n\n let daysInMonth = getDaysInMonth(\n   currentMonth + 1,\n  currentYear\n);\n\n let firstDayOfWeek = new Date(\n     currentYear,\n      currentMonth ).getDay();\n\n\n let lastDay = new Date(  currentYear,  currentMonth, 0 ).getDate();\n     let day = 1;\n     let dayOfNextMonth = 0;\n     let cellText;\n     const tds = ( i, currentDate )  => {\n         let td = [];\n         const baseDayClass = 'basis class';\n         for ( let y = 0; y < 7; y++ ) {\n            let dayClass = baseDayClass;\n             if ( i === 0 && y < firstDayOfWeek - 1  ) {\n                 cellText = lastDay - firstDayOfWeek + 2 + y;\n                 dayClass += ' ' + styles.calendarNextMonth;\n             } else if ( day >= daysInMonth ) {\n                 dayOfNextMonth++;\n                 dayClass += ' ' + styles.calendarNextMonth;\n                 cellText = day;\n                day = dayOfNextMonth; \n                \n            } else {\n                 cellText = day;\n                 if (  day === currentDate.getDate() &&\n                 currentYear === currentDate.getFullYear() &&\n                  currentMonth === currentDate.getMonth() ) {\n                   dayClass += ' ' + styles.actualDate;\n                    \n                 }\n                 day++;\n             }\n             td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n         }\n         return td;\n     };\n     const trs = (currentDate)  => {\n         let tr = [];\n         for ( let i = 0; i < 5; i++ ) {\n             tr.push( <tr key={i}>{tds( i, currentDate )}</tr> );\n         }\n         return   tr;\n     };\n\n       return (\n\n        <div className=\"calendarBody\">\n            <div>\n                <table>\n                    <tbody>\n                        {trs(props.currentDate) }\n                    </tbody>\n                </table>\n            </div>\n            {/* <Button text='Add an Event'/>  */}\n        </div>\n    );\n};\n//}\n\nCalendarBody.propTypes = {\n    /** Description of prop \"text\". */\n\n    text: PropTypes.string\n};\n\nCalendarBody.defaultProps = {\n    text:''\n};\n\nexport default CalendarBody;\n"]},"metadata":{},"sourceType":"module"}