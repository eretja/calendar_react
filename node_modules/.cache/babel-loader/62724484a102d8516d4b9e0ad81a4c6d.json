{"ast":null,"code":"import _objectDestructuringEmpty from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nvar _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/ui/form/Select.1.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './select.scss';\n/**\n * General component description in JSDoc format. Markdown is *supported*.\n */\n\nvar Select = function Select(_ref) {\n  var options = _ref.options;\n  var listItems = options.map(function (entry) {\n    return React.createElement(\"option\", {\n      key: entry.text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, entry.text);\n  });\n\n  setYearChoiceAndMonthEventListeners = function setYearChoiceAndMonthEventListeners(_ref2) {\n    _objectDestructuringEmpty(_ref2);\n\n    var changeYear = document.getElementById('year');\n    var changeMonth = document.getElementById('month');\n    changeYear.addEventListener('change', function () {\n      var newModel = {};\n      newModel.currentYear = parseInt(changeYear.value);\n      newModel.currentMonth = parseInt(changeMonth.value);\n      newModel.actDate = new Date(newModel.currentYear, newModel.currentMonth);\n      var eventYear = new CustomEvent('updateModelAndView', {\n        detail: newModel\n      });\n      var elementYear = document.getElementById('calendar');\n      elementYear.dispatchEvent(eventYear);\n    });\n    changeMonth.addEventListener('change', function () {\n      /*const elem = document.getElementById(\"calendar\");\n      const eventModelRequest = new Event(\"modelDataRequest\");\n      elem.addEventListener(\"modelDataResponse\", function(e) {\n      console.log( 'message received', e.detail);\n      });\n      elem.dispatchEvent(eventModelRequest);*/\n      var newModel = {};\n      newModel.currentYear = parseInt(changeYear.value);\n      newModel.currentMonth = parseInt(changeMonth.value);\n      newModel.actDate = new Date(newModel.currentYear, newModel.currentMonth);\n      var eventMonth = new CustomEvent('updateModelAndView', {\n        detail: newModel\n      });\n      var elementMonth = document.getElementById('calendar');\n      elementMonth.dispatchEvent(eventMonth);\n    });\n  };\n\n  return React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    className: styles.select,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, listItems));\n};\n\nSelect.propTypes = {\n  /** Description of prop \"text\". */\n  options: PropTypes.array\n};\nSelect.defaultProps = {\n  options: [{\n    value: '0',\n    text: 'bitte wählen'\n  }]\n};\nexport default Select;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/ui/form/Select.1.jsx"],"names":["React","PropTypes","styles","Select","options","listItems","map","entry","text","setYearChoiceAndMonthEventListeners","changeYear","document","getElementById","changeMonth","addEventListener","newModel","currentYear","parseInt","value","currentMonth","actDate","Date","eventYear","CustomEvent","detail","elementYear","dispatchEvent","eventMonth","elementMonth","select","propTypes","array","defaultProps"],"mappings":";;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAGA;;;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAmB;AAAA,MAAfC,OAAe,QAAfA,OAAe;AAC9B,MAAMC,SAAS,GAAGD,OAAO,CAACE,GAAR,CAAa,UAAEC,KAAF;AAAA,WAC3B;AAAQ,MAAA,GAAG,EAAEA,KAAK,CAACC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BD,KAAK,CAACC,IAAhC,CAD2B;AAAA,GAAb,CAAlB;;AAIAC,EAAAA,mCAAmC,GAAE,oDAAY;AAAA;;AAC7C,QAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAyB,MAAzB,CAAnB;AACA,QAAMC,WAAW,GAAGF,QAAQ,CAACC,cAAT,CAAyB,OAAzB,CAApB;AAEAF,IAAAA,UAAU,CAACI,gBAAX,CAA6B,QAA7B,EAAuC,YAAW;AAC9C,UAAIC,QAAQ,GAAG,EAAf;AACAA,MAAAA,QAAQ,CAACC,WAAT,GAAuBC,QAAQ,CAAEP,UAAU,CAACQ,KAAb,CAA/B;AACAH,MAAAA,QAAQ,CAACI,YAAT,GAAwBF,QAAQ,CAAEJ,WAAW,CAACK,KAAd,CAAhC;AACAH,MAAAA,QAAQ,CAACK,OAAT,GAAmB,IAAIC,IAAJ,CAAUN,QAAQ,CAACC,WAAnB,EAAgCD,QAAQ,CAACI,YAAzC,CAAnB;AAEA,UAAIG,SAAS,GAAG,IAAIC,WAAJ,CAAiB,oBAAjB,EAAuC;AACnDC,QAAAA,MAAM,EAAET;AAD2C,OAAvC,CAAhB;AAGA,UAAMU,WAAW,GAAGd,QAAQ,CAACC,cAAT,CAAyB,UAAzB,CAApB;AACAa,MAAAA,WAAW,CAACC,aAAZ,CAA2BJ,SAA3B;AACH,KAXD;AAaAT,IAAAA,WAAW,CAACC,gBAAZ,CAA8B,QAA9B,EAAwC,YAAW;AAC/C;;;;;;AAOA,UAAIC,QAAQ,GAAG,EAAf;AACAA,MAAAA,QAAQ,CAACC,WAAT,GAAuBC,QAAQ,CAAEP,UAAU,CAACQ,KAAb,CAA/B;AACAH,MAAAA,QAAQ,CAACI,YAAT,GAAwBF,QAAQ,CAAEJ,WAAW,CAACK,KAAd,CAAhC;AACAH,MAAAA,QAAQ,CAACK,OAAT,GAAmB,IAAIC,IAAJ,CAAUN,QAAQ,CAACC,WAAnB,EAAgCD,QAAQ,CAACI,YAAzC,CAAnB;AAEA,UAAIQ,UAAU,GAAG,IAAIJ,WAAJ,CAAiB,oBAAjB,EAAuC;AACpDC,QAAAA,MAAM,EAAET;AAD4C,OAAvC,CAAjB;AAGA,UAAMa,YAAY,GAAGjB,QAAQ,CAACC,cAAT,CAAyB,UAAzB,CAArB;AACAgB,MAAAA,YAAY,CAACF,aAAb,CAA4BC,UAA5B;AACH,KAlBD;AAmBH,GApCD;;AAqCA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,SAAS,EAAEzB,MAAM,CAAC2B,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKxB,SADL,CADJ,CADJ;AAOH,CAjDD;;AAmDAF,MAAM,CAAC2B,SAAP,GAAmB;AACf;AAEA1B,EAAAA,OAAO,EAAEH,SAAS,CAAC8B;AAHJ,CAAnB;AAMA5B,MAAM,CAAC6B,YAAP,GAAsB;AAClB5B,EAAAA,OAAO,EAAE,CAAE;AAAEc,IAAAA,KAAK,EAAE,GAAT;AAAcV,IAAAA,IAAI,EAAE;AAApB,GAAF;AADS,CAAtB;AAIA,eAAeL,MAAf","sourcesContent":["\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './select.scss';\n\n\n/**\n * General component description in JSDoc format. Markdown is *supported*.\n */\nconst Select = ( { options } ) => {\n    const listItems = options.map( ( entry )  =>\n        <option key={entry.text}>{entry.text}</option>\n    );\n\n    setYearChoiceAndMonthEventListeners= ( {  } ) => {\n        const changeYear = document.getElementById( 'year' );\n        const changeMonth = document.getElementById( 'month' );\n\n        changeYear.addEventListener( 'change', function() {\n            let newModel = {};\n            newModel.currentYear = parseInt( changeYear.value );\n            newModel.currentMonth = parseInt( changeMonth.value );\n            newModel.actDate = new Date( newModel.currentYear, newModel.currentMonth );\n\n            let eventYear = new CustomEvent( 'updateModelAndView', {\n                detail: newModel\n            } );\n            const elementYear = document.getElementById( 'calendar' );\n            elementYear.dispatchEvent( eventYear );\n        } );\n\n        changeMonth.addEventListener( 'change', function() {\n            /*const elem = document.getElementById(\"calendar\");\n      const eventModelRequest = new Event(\"modelDataRequest\");\n      elem.addEventListener(\"modelDataResponse\", function(e) {\n        console.log( 'message received', e.detail);\n      });\n      elem.dispatchEvent(eventModelRequest);*/\n\n            let newModel = {};\n            newModel.currentYear = parseInt( changeYear.value );\n            newModel.currentMonth = parseInt( changeMonth.value );\n            newModel.actDate = new Date( newModel.currentYear, newModel.currentMonth );\n\n            let eventMonth = new CustomEvent( 'updateModelAndView', {\n                detail: newModel\n            } );\n            const elementMonth = document.getElementById( 'calendar' );\n            elementMonth.dispatchEvent( eventMonth );\n        } );\n    }\n    return (\n        <label>\n            <select className={styles.select}>\n                {listItems}\n            </select>\n        </label>\n    );\n};\n\nSelect.propTypes = {\n    /** Description of prop \"text\". */\n\n    options: PropTypes.array\n};\n\nSelect.defaultProps = {\n    options: [ { value: '0', text: 'bitte wählen' } ]\n};\n\nexport default Select;\n"]},"metadata":{},"sourceType":"module"}