{"ast":null,"code":"/* vim: set shiftwidth=2 tabstop=2 noexpandtab textwidth=80 wrap : */\n\"use strict\";\n\nmodule.exports = walker;\n\nfunction walker(astNode, functionTable, offset) {\n  function stop() {\n    throw stop;\n  }\n\n  var recurse = function recurse(astNode) {\n    if (!astNode || typeof astNode !== 'object' || !astNode.type) {\n      return astNode;\n    } // range based recursion: only recurse when the astNode is in range\n\n\n    if (offset !== undefined && astNode.range && (astNode.range[0] > offset || astNode.range[1] < offset)) {\n      return astNode;\n    }\n\n    var fn = functionTable[astNode.type] || functionTable.default || checkProps;\n    return fn(astNode, recurse, stop);\n  };\n\n  var ret;\n\n  try {\n    ret = recurse(astNode);\n  } catch (e) {\n    if (e !== stop) throw e;\n  }\n\n  return ret;\n}\n\nfunction checkProps(node, recurse) {\n  var mapped = {};\n  Object.keys(node).forEach(function (key) {\n    var prop = node[key];\n    var ret = prop;\n\n    if (Array.isArray(prop)) {\n      ret = prop.map(recurse);\n    } else {\n      ret = recurse(prop);\n    }\n\n    mapped[key] = ret;\n  });\n  return mapped;\n}\n\nwalker.checkProps = checkProps;","map":null,"metadata":{},"sourceType":"script"}