{"ast":null,"code":"var _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\nvar newDate = new Date();\nconsole.log('newDate', newDate);\nvar date = newDate.getDate();\nconsole.log('date', date);\nvar currentMonth = newDate.getMonth() + 1;\nconsole.log('currentMonth', currentMonth);\nvar currentYear = newDate.getFullYear();\nconsole.log('currentYear', currentYear);\n\nvar getDaysInMonth = function getDaysInMonth(month, year) {\n  return new Date(currentYear, currentMonth, 0).getDate();\n};\n\nconsole.log('getDaysInMonth', getDaysInMonth());\nvar daysInMonth = getDaysInMonth(currentMonth + 1, currentYear);\nconsole.log('daysInMonth', daysInMonth);\nvar firstDayOfWeek = new Date(currentYear, currentMonth).getDay();\nconsole.log('firstDayOfWeek', firstDayOfWeek);\nvar lastDay = new Date(currentYear, currentMonth, 0).getDate();\nconsole.log('lastDay', lastDay);\nvar cellText = [];\n\nvar CalendarBody = function CalendarBody(_ref) {\n  var text = _ref.text;\n  var currentDay = 1;\n  var dayOfNextMonth = 0;\n\n  var tds = function tds() {\n    var td = [];\n\n    for (var y = 0; y < 7; y++) {\n      td.push(React.createElement(\"td\", {\n        key: y,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, cellText + 1));\n\n      if (lastDay < cellText) {\n        dayOfNextMonth++;\n        cellText = dayOfNextMonth;\n      }\n\n      if (currentDay === calendarModel.today.getDate() && calendarModel.currentYear === calendarModel.today.getFullYear() && calendarModel.currentMonth === calendarModel.today.getMonth()) {\n        cell.classList.add('calendar__weekdays--color');\n      } else if (y < firstDayOfWeek - 1) {\n        cellText = lastDay - daysInMonth + 1;\n      }\n\n      cellText++;\n    }\n\n    return td;\n  };\n\n  var trs = function trs() {\n    var tr = [];\n\n    for (var i = 0; i < 5 && currentDay <= daysInMonth; i++) {\n      tr.push(React.createElement(\"tr\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, tds()));\n    }\n\n    return tr;\n  };\n\n  return React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, trs()))));\n};\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBody.defaultProps = {\n  text: 'defaultText'\n};\nexport default CalendarBody;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx"],"names":["React","PropTypes","styles","newDate","Date","console","log","date","getDate","currentMonth","getMonth","currentYear","getFullYear","getDaysInMonth","month","year","daysInMonth","firstDayOfWeek","getDay","lastDay","cellText","CalendarBody","text","currentDay","dayOfNextMonth","tds","td","y","push","calendarModel","today","cell","classList","add","trs","tr","i","propTypes","string","defaultProps"],"mappings":"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","sourcesContent":["\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\n\nlet newDate = new Date();\nconsole.log( 'newDate', newDate );\nlet date = newDate.getDate();\nconsole.log( 'date', date );\nlet currentMonth = newDate.getMonth() + 1;\nconsole.log( 'currentMonth', currentMonth );\nlet currentYear = newDate.getFullYear();\nconsole.log( 'currentYear', currentYear );\nlet getDaysInMonth = function( month, year ) {\n    return new Date( currentYear, currentMonth, 0 ).getDate();\n};\nconsole.log( 'getDaysInMonth', getDaysInMonth() );\n\nlet daysInMonth = getDaysInMonth(\n    currentMonth + 1,\n    currentYear\n);\nconsole.log( 'daysInMonth', daysInMonth );\nlet firstDayOfWeek = new Date(\n    currentYear,\n    currentMonth ).getDay();\nconsole.log( 'firstDayOfWeek', firstDayOfWeek );\nlet lastDay = new Date( currentYear, currentMonth, 0 ).getDate();\nconsole.log( 'lastDay', lastDay );\n\nlet cellText = [];\nconst CalendarBody = ( { text } ) => {\n    let currentDay = 1;\n    let dayOfNextMonth = 0;\n    const tds = ( )  => {\n        let td = [];\n\n\n        for ( let y = 0; y < 7; y++ ) {\n            td.push( <td key={ y }>{cellText + 1}</td> );\n            if ( lastDay < cellText ) {\n                dayOfNextMonth++;\n                cellText = dayOfNextMonth;\n            } \n            if ( currentDay === calendarModel.today.getDate() \n            && calendarModel.currentYear === calendarModel.today.getFullYear() \n            && calendarModel.currentMonth === calendarModel.today.getMonth() ) {\n                cell.classList.add( 'calendar__weekdays--color' );\n            }\nelse if ( y < firstDayOfWeek - 1 ) {\n                cellText = lastDay - daysInMonth + 1;\n            }\n            cellText++;\n        }\n        return td;\n    };\n\n    const trs = ()  => {\n        let tr = [];\n        for ( let i = 0; i < 5 && currentDay <= daysInMonth; i++ ) {\n            tr.push( <tr key={i}>{tds( )}</tr> );\n\n        }\n\n        return   tr;\n    };\n    return (\n\n        <div className=\"row\">\n            <div>\n                <table>\n                    <tbody\n                    >\n\n                        { trs() }\n\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\n\nCalendarBody.propTypes = {\n    /** Description of prop \"text\". */\n\n    text: PropTypes.string\n};\n\nCalendarBody.defaultProps = {\n    text: 'defaultText'\n};\n\nexport default CalendarBody;\n"]},"metadata":{},"sourceType":"module"}