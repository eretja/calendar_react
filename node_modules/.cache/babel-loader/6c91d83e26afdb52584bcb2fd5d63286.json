{"ast":null,"code":"var _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\nvar newDate = new Date();\nvar date = newDate.getDate();\nvar currentMonth = newDate.getMonth();\nvar currentYear = newDate.getFullYear();\n\nvar getDaysInMonth = function getDaysInMonth(month, year) {\n  return new Date(year, month, 0).getDate();\n};\n\nvar daysInMonth = getDaysInMonth(currentMonth + 1, currentYear);\nvar firstDayOfWeek = new Date(currentYear, currentMonth).getDay();\nvar lastDay = new Date(currentYear, currentMonth, 0).getDate();\nconsole.log('currentYear', currentYear);\nconsole.log('currentMonth', currentMonth);\nconsole.log('daysInMonth', daysInMonth);\nconsole.log('firstDayOfWeek', firstDayOfWeek);\nconsole.log('lastDay', lastDay);\nconsole.log('newDate', newDate);\nconsole.log('date', date);\n\nvar CalendarBody = function CalendarBody() {\n  var day = 1;\n  var cellText;\n  var dayOfNextMonth = 1;\n\n  var tds = function tds(i) {\n    var td = [];\n\n    for (var y = 0; y < 7; y++) {\n      td.push(React.createElement(\"td\", {\n        key: y,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, day));\n\n      if (i === 0 && y < firstDayOfWeek - 1) {\n        cellText = lastDay - firstDayOfWeek + 2 + y;\n      } else if (day > daysInMonth) {\n        dayOfNextMonth++;\n        day = dayOfNextMonth;\n      } else {\n        cellText = day;\n\n        if (day === newDate.getDate() && currentYear === newDate.getFullYear() && currentMonth === newDate.getMonth()) {\n          day;\n        }\n\n        day++;\n      }\n    }\n\n    return td;\n  };\n\n  var trs = function trs() {\n    var tr = [];\n\n    for (var i = 0; i < 6; i++) {\n      tr.push(React.createElement(\"tr\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, tds(i)));\n    }\n\n    return tr;\n  };\n\n  return React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, trs()))));\n};\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBody.defaultProps = {\n  text: 'defaultText'\n};\nexport default CalendarBody;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx"],"names":["React","PropTypes","styles","newDate","Date","date","getDate","currentMonth","getMonth","currentYear","getFullYear","getDaysInMonth","month","year","daysInMonth","firstDayOfWeek","getDay","lastDay","console","log","CalendarBody","day","cellText","dayOfNextMonth","tds","i","td","y","push","trs","tr","propTypes","text","string","defaultProps"],"mappings":"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","sourcesContent":["\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\n\nlet newDate = new Date();\n\nlet date = newDate.getDate();\n\nlet currentMonth = newDate.getMonth();\n\nlet currentYear = newDate.getFullYear();\n\nlet getDaysInMonth = function( month, year ) {\n    return new Date( year, month, 0 ).getDate();\n};\n\nlet daysInMonth = getDaysInMonth(\n    currentMonth + 1,\n    currentYear\n);\n\nlet firstDayOfWeek = new Date(\n    currentYear,\n    currentMonth ).getDay();\n\n\nlet lastDay = new Date( currentYear, currentMonth, 0 ).getDate();\n\nconsole.log( 'currentYear', currentYear );\nconsole.log( 'currentMonth', currentMonth );\nconsole.log( 'daysInMonth', daysInMonth );\nconsole.log( 'firstDayOfWeek', firstDayOfWeek );\nconsole.log( 'lastDay', lastDay );\nconsole.log( 'newDate', newDate );\nconsole.log( 'date', date );\n\nconst CalendarBody = ( ) => {\n    let day = 1;\n    let cellText;\n    let dayOfNextMonth = 1;\n    const tds = ( i )  => {\n        let td = [];\n        for ( let y = 0; y < 7; y++ ) {\n            td.push( <td key={ y }>{day}</td> );\n            if ( i === 0 && y < firstDayOfWeek - 1  ) {\n                cellText = lastDay - firstDayOfWeek + 2 + y;\n            } else if ( day > daysInMonth ) {\n                dayOfNextMonth++;\n                day = dayOfNextMonth;\n            } else {\n                cellText = day;\n                if (  day === newDate.getDate() &&\n            currentYear === newDate.getFullYear() &&\n              currentMonth === newDate.getMonth() ) {\n                    day;\n                }\n                day++;\n            }\n        }\n        return td;\n    };\n\n    const trs = ()  => {\n        let tr = [];\n        for ( let i = 0; i < 6; i++ ) {\n            tr.push( <tr key={i}>{tds( i )}</tr> );\n        }\n        return   tr;\n    };\n    return (\n\n        <div className=\"row\">\n            <div>\n                <table>\n                    <tbody>\n                        { trs() }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\n\nCalendarBody.propTypes = {\n    /** Description of prop \"text\". */\n\n    text: PropTypes.string\n};\n\nCalendarBody.defaultProps = {\n    text: 'defaultText'\n};\n\nexport default CalendarBody;\n"]},"metadata":{},"sourceType":"module"}