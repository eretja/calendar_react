{"ast":null,"code":"var _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./calendarBody.scss\";\nimport Button from \"ui/buttons/Button\";\n\nvar CalendarBody = function CalendarBody(props) {\n  var _props$state = props.state,\n      year = _props$state.year,\n      month = _props$state.month,\n      date = _props$state.date;\n  var calendarWeeks = [],\n      calendarDays = [];\n  var newDate = new Date();\n  var currentMonth = newDate.getMonth();\n  var currentYear = newDate.getFullYear();\n  var totalWeeks = Math.ceil((daysInMonth + firstDayOfWeek) / 7);\n  var daysInMonth = new Date(year, month + 1, 0).getDate();\n  var firstDayOfWeek = new Date(year, month).getDay();\n  var lastDay = new Date(currentYear, currentMonth, 0).getDate();\n  var dates = 1;\n\n  for (var _i = 0; _i < totalWeeks * 7; _i++) {\n    if (_i < firstDayOfWeek || _i >= daysInMonth + firstDayOfWeek) {\n      calendarDays.push(null);\n    } else {\n      calendarDays.push(dates);\n      dates++;\n    }\n  }\n\n  for (var i = 0; i < calendarDays.length; i++) {\n    calendarWeeks.push(calendarDays.splice(0, 7));\n  } // let dayOfNextMonth = 0;\n  // let cellText;\n  // const tds = (i, currentDate) => {\n  //   let td = [];\n  //   const baseDayClass = \"basis class\";\n  //   for (let y = 0; y < 7; y++) {\n  //     let dayClass = baseDayClass;\n  //     if (i === 0 && y < firstDayOfWeek - 1) {\n  //       cellText = lastDay - firstDayOfWeek + 2 + y;\n  //       dayClass += \" \" + styles.calendarNextMonth;\n  //     } else if (day >= daysInMonth) {\n  //       dayOfNextMonth++;\n  //       dayClass += \" \" + styles.calendarNextMonth;\n  //       cellText = day;\n  //       day = dayOfNextMonth;\n  //     } else {\n  //       cellText = day;\n  //       if (\n  //         day === currentDate.getDate() &&\n  //         currentYear === currentDate.getFullYear() &&\n  //         currentMonth === currentDate.getMonth()\n  //       ) {\n  //         dayClass += \" \" + styles.actualDate;\n  //       }\n  //       day++;\n  //     }\n  //     //console.log( i, y, dayClass, typeof dayClass );\n  //     td.push(\n  //       <td key={y} className={dayClass}>\n  //         {cellText}\n  //       </td>\n  //     );\n  //   }\n  //   return td;\n  // };\n  // const trs = currentDate => {\n  //   let tr = [];\n  //   for (let i = 0; i < 5; i++) {\n  //     tr.push(<tr key={i}>{tds(i, currentDate)}</tr>);\n  //   }\n  //   return tr;\n  //};\n  //console.log( 'new Date()', new Date(), typeof new Date(), new Date().toISOString() );\n\n\n  return React.createElement(\"div\", {\n    className: \"calendarBody\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, trs(props.currentDate)))));\n}; //}\n\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBody.defaultProps = {\n  text: \"\"\n};\nexport default CalendarBody;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx"],"names":["React","PropTypes","styles","Button","CalendarBody","props","state","year","month","date","calendarWeeks","calendarDays","newDate","Date","currentMonth","getMonth","currentYear","getFullYear","totalWeeks","Math","ceil","daysInMonth","firstDayOfWeek","getDate","getDay","lastDay","dates","i","push","length","splice","trs","currentDate","propTypes","text","string","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAAA,qBACLA,KAAK,CAACC,KADD;AAAA,MACxBC,IADwB,gBACxBA,IADwB;AAAA,MACnBC,KADmB,gBACnBA,KADmB;AAAA,MACbC,IADa,gBACbA,IADa;AAE7B,MAAMC,aAAa,GAAG,EAAtB;AAAA,MAA0BC,YAAY,GAAG,EAAzC;AAGC,MAAIC,OAAO,GAAG,IAAIC,IAAJ,EAAd;AACA,MAAIC,YAAY,GAAGF,OAAO,CAACG,QAAR,EAAnB;AACA,MAAIC,WAAW,GAAGJ,OAAO,CAACK,WAAR,EAAlB;AAEA,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAU,CAACC,WAAW,GAAGC,cAAf,IAAiC,CAA3C,CAAjB;AACA,MAAID,WAAW,GAAG,IAAIR,IAAJ,CAASN,IAAT,EAAeC,KAAK,GAAC,CAArB,EAAwB,CAAxB,EAA2Be,OAA3B,EAAlB;AAEA,MAAID,cAAc,GAAG,IAAIT,IAAJ,CAASN,IAAT,EAAeC,KAAf,EAAsBgB,MAAtB,EAArB;AAEA,MAAIC,OAAO,GAAG,IAAIZ,IAAJ,CAASG,WAAT,EAAsBF,YAAtB,EAAoC,CAApC,EAAuCS,OAAvC,EAAd;AACA,MAAIG,KAAK,GAAG,CAAZ;;AACA,OAAI,IAAIC,EAAC,GAAG,CAAZ,EAAeA,EAAC,GAAGT,UAAU,GAAC,CAA9B,EAAiCS,EAAC,EAAlC,EAAqC;AACnC,QAAGA,EAAC,GAAGL,cAAJ,IAAsBK,EAAC,IAAIN,WAAW,GAAGC,cAA5C,EAA4D;AAC1DX,MAAAA,YAAY,CAACiB,IAAb,CAAkB,IAAlB;AACD,KAFD,MAEO;AACLjB,MAAAA,YAAY,CAACiB,IAAb,CAAkBF,KAAlB;AACAA,MAAAA,KAAK;AACN;AACF;;AACD,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGhB,YAAY,CAACkB,MAAhC,EAAwCF,CAAC,EAAzC,EAA4C;AAC1CjB,IAAAA,aAAa,CAACkB,IAAd,CAAmBjB,YAAY,CAACmB,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAAnB;AACD,GA1B2B,CA8B5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQC,GAAG,CAAC1B,KAAK,CAAC2B,WAAP,CAAX,CADF,CADF,CADF,CADF;AAUD,CArFD,C,CAsFA;;;AAEA5B,YAAY,CAAC6B,SAAb,GAAyB;AACvB;AAEAC,EAAAA,IAAI,EAAEjC,SAAS,CAACkC;AAHO,CAAzB;AAMA/B,YAAY,CAACgC,YAAb,GAA4B;AAC1BF,EAAAA,IAAI,EAAE;AADoB,CAA5B;AAIA,eAAe9B,YAAf","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./calendarBody.scss\";\nimport Button from \"ui/buttons/Button\";\n\nconst CalendarBody = props => {\n let {year,month,date} = props.state;\n const calendarWeeks = [], calendarDays = [];\n\n\n  let newDate = new Date();\n  let currentMonth = newDate.getMonth();\n  let currentYear = newDate.getFullYear();\n\n  let totalWeeks = Math.ceil((daysInMonth + firstDayOfWeek) / 7)  \n  let daysInMonth = new Date(year, month+1, 0).getDate();\n\n  let firstDayOfWeek = new Date(year, month).getDay();\n\n  let lastDay = new Date(currentYear, currentMonth, 0).getDate();\n  let dates = 1;\n  for(let i = 0; i < totalWeeks*7; i++){   \n    if(i < firstDayOfWeek || i >= daysInMonth + firstDayOfWeek) {\n      calendarDays.push(null)     \n    } else {\n      calendarDays.push(dates)\n      dates++\n    }\n  }   \n  for(var i = 0; i < calendarDays.length; i++){ \n    calendarWeeks.push(calendarDays.splice(0, 7));\n  }\n  \n\n\n  // let dayOfNextMonth = 0;\n  // let cellText;\n  // const tds = (i, currentDate) => {\n  //   let td = [];\n  //   const baseDayClass = \"basis class\";\n  //   for (let y = 0; y < 7; y++) {\n  //     let dayClass = baseDayClass;\n  //     if (i === 0 && y < firstDayOfWeek - 1) {\n  //       cellText = lastDay - firstDayOfWeek + 2 + y;\n  //       dayClass += \" \" + styles.calendarNextMonth;\n  //     } else if (day >= daysInMonth) {\n  //       dayOfNextMonth++;\n  //       dayClass += \" \" + styles.calendarNextMonth;\n  //       cellText = day;\n  //       day = dayOfNextMonth;\n  //     } else {\n  //       cellText = day;\n  //       if (\n  //         day === currentDate.getDate() &&\n  //         currentYear === currentDate.getFullYear() &&\n  //         currentMonth === currentDate.getMonth()\n  //       ) {\n  //         dayClass += \" \" + styles.actualDate;\n  //       }\n  //       day++;\n  //     }\n  //     //console.log( i, y, dayClass, typeof dayClass );\n  //     td.push(\n  //       <td key={y} className={dayClass}>\n  //         {cellText}\n  //       </td>\n  //     );\n  //   }\n  //   return td;\n  // };\n  // const trs = currentDate => {\n  //   let tr = [];\n  //   for (let i = 0; i < 5; i++) {\n  //     tr.push(<tr key={i}>{tds(i, currentDate)}</tr>);\n  //   }\n  //   return tr;\n  //};\n\n  //console.log( 'new Date()', new Date(), typeof new Date(), new Date().toISOString() );\n \n  return (\n    <div className=\"calendarBody\">\n      <div>\n        <table>\n          <tbody>{trs(props.currentDate)}</tbody>\n        </table>\n      </div>\n      {/* <Button text='Add an Event'/>  */}\n    </div>\n  );\n};\n//}\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n\n  text: PropTypes.string\n};\n\nCalendarBody.defaultProps = {\n  text: \"\"\n};\n\nexport default CalendarBody;\n"]},"metadata":{},"sourceType":"module"}