{"ast":null,"code":"import _classCallCheck from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\n\nvar CalendarBody =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CalendarBody, _React$Component);\n\n  function CalendarBody(props) {\n    var _this;\n\n    _classCallCheck(this, CalendarBody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalendarBody).call(this, props));\n    var newDate = new Date();\n    _this.state = {\n      currentMonth: newDate.getMonth(),\n      currentYear: newDate.getFullYear() // let currentMonth = newDate.getMonth();\n      // let currentYear = newDate.getFullYear();\n\n    };\n\n    var getDaysInMonth = function getDaysInMonth(month, year) {\n      return new Date(year, month, 0).getDate();\n    };\n\n    var daysInMonth = getDaysInMonth(_this.state.currentMonth + 1, _this.state.currentYear);\n    var firstDayOfWeek = new Date(_this.state.currentYear, _this.state.currentMonth).getDay();\n    var lastDay = new Date(_this.state.currentYear, _this.state.currentMonth, 0).getDate();\n    var day = 1;\n    var dayOfNextMonth = 0;\n    var cellText;\n\n    var tds = function tds(i) {\n      var td = [];\n      var baseDayClass = 'basis class';\n\n      for (var y = 0; y < 7; y++) {\n        var dayClass = baseDayClass;\n\n        if (i === 0 && y < firstDayOfWeek - 1) {\n          cellText = lastDay - firstDayOfWeek + 2 + y;\n        } else if (day >= daysInMonth) {\n          dayOfNextMonth++;\n          cellText = day;\n          day = dayOfNextMonth;\n        } else {\n          cellText = day;\n\n          if (day === newDate.getDate() && _this.state.currentYear === newDate.getFullYear() && _this.state.currentMonth === newDate.getMonth()) {\n            //day;\n            dayClass += ' ' + styles.actualDate;\n          } //cellText = day;\n\n\n          day++;\n        }\n\n        td.push(React.createElement(\"td\", {\n          key: y,\n          className: dayClass,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, cellText));\n      }\n\n      return td;\n    };\n\n    var trs = function trs() {\n      var tr = [];\n\n      for (var i = 0; i < 6\n      /** && day <= daysInMonth*/\n      ; i++) {\n        tr.push(React.createElement(\"tr\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, tds(i)));\n      }\n\n      return tr;\n    };\n\n    return _this;\n  } // const CalendarBody = (props) => {\n  // let newDate = new Date();\n  // //   super(props);\n  // //    this.state = {\n  // //        date: newDate.getDate(),\n  // //        currentMonth: newDate.getMonth(), \n  // //        currentYear: newDate.getFullYear()\n  // //     }\n  //     //let date = newDate.getDate();\n  //    let currentMonth = newDate.getMonth();\n  //      let currentYear = newDate.getFullYear();\n  // let getDaysInMonth = function( month, year ) {\n  //     return new Date( year, month, 0 ).getDate();\n  // };\n  // let daysInMonth = getDaysInMonth(\n  //     /*this.state.*/currentMonth + 1,\n  //    /*this.state.*/currentYear\n  // );\n  // let firstDayOfWeek = new Date(\n  //      /*this.state.*/currentYear,\n  //      /*this.state.*/ currentMonth ).getDay();\n  // let lastDay = new Date(  /*this.state.*/currentYear,  /*this.state.*/currentMonth, 0 ).getDate();\n  //     let day = 1;\n  //     let dayOfNextMonth = 0;\n  //     let cellText;\n  //     const tds = ( i )  => {\n  //         let td = [];\n  //         const baseDayClass = 'basis class';\n  //         for ( let y = 0; y < 7; y++ ) {\n  //             let dayClass = baseDayClass;\n  //             if ( i === 0 && y < firstDayOfWeek - 1  ) {\n  //                 cellText = lastDay - firstDayOfWeek + 2 + y;\n  //             } else if ( day >= daysInMonth ) {\n  //                 dayOfNextMonth++;\n  //                 cellText = day;\n  //                 day = dayOfNextMonth;\n  //             } else {\n  //                 cellText = day;\n  //                 if (  day === newDate.getDate() &&\n  //                  /*this.state.*/currentYear === newDate.getFullYear() &&\n  //                  /*this.state.*/currentMonth === newDate.getMonth() ) {\n  //                     //day;\n  //                     dayClass += ' ' + styles.actualDate;\n  //                 }\n  //                 //cellText = day;\n  //                 day++;\n  //             }\n  //             td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n  //         }\n  //         return td;\n  //     };\n  //     const trs = ()  => {\n  //         let tr = [];\n  //         for ( let i = 0; i < 6/** && day <= daysInMonth*/; i++ ) {\n  //             tr.push( <tr key={i}>{tds( i )}</tr> );\n  //         }\n  //         return   tr;\n  //     };\n\n\n  _createClass(CalendarBody, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, this.trs()))));\n    }\n  }]);\n\n  return CalendarBody;\n}(React.Component);\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBody.defaultProps = {\n  text: 'defaultText'\n};\nexport default CalendarBody;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx"],"names":["React","PropTypes","styles","CalendarBody","props","newDate","Date","state","currentMonth","getMonth","currentYear","getFullYear","getDaysInMonth","month","year","getDate","daysInMonth","firstDayOfWeek","getDay","lastDay","day","dayOfNextMonth","cellText","tds","i","td","baseDayClass","y","dayClass","actualDate","push","trs","tr","Component","propTypes","text","string","defaultProps"],"mappings":";;;;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;IAEMC,Y;;;;;AACF,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,sFAAMA,KAAN;AACA,QAAIC,OAAO,GAAG,IAAIC,IAAJ,EAAd;AACA,UAAKC,KAAL,GAAa;AACLC,MAAAA,YAAY,EAAEH,OAAO,CAACI,QAAR,EADT;AAEHC,MAAAA,WAAW,EAAEL,OAAO,CAACM,WAAR,EAFV,CAMf;AACA;;AAPe,KAAb;;AASN,QAAIC,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,KAAV,EAAiBC,IAAjB,EAAwB;AAC1C,aAAO,IAAIR,IAAJ,CAAUQ,IAAV,EAAgBD,KAAhB,EAAuB,CAAvB,EAA2BE,OAA3B,EAAP;AACF,KAFD;;AAIA,QAAIC,WAAW,GAAGJ,cAAc,CAC7B,MAAKL,KAAL,CAAWC,YAAX,GAA0B,CADG,EAE9B,MAAKD,KAAL,CAAWG,WAFmB,CAAhC;AAKA,QAAIO,cAAc,GAAG,IAAIX,IAAJ,CACjB,MAAKC,KAAL,CAAWG,WADM,EAEjB,MAAKH,KAAL,CAAWC,YAFM,EAESU,MAFT,EAArB;AAKA,QAAIC,OAAO,GAAG,IAAIb,IAAJ,CAAU,MAAKC,KAAL,CAAWG,WAArB,EAAmC,MAAKH,KAAL,CAAWC,YAA9C,EAA4D,CAA5D,EAAgEO,OAAhE,EAAd;AACG,QAAIK,GAAG,GAAG,CAAV;AACA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,QAAJ;;AACA,QAAMC,GAAG,GAAG,SAANA,GAAM,CAAEC,CAAF,EAAU;AAClB,UAAIC,EAAE,GAAG,EAAT;AACA,UAAMC,YAAY,GAAG,aAArB;;AACA,WAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA8B;AAC1B,YAAIC,QAAQ,GAAGF,YAAf;;AACA,YAAKF,CAAC,KAAK,CAAN,IAAWG,CAAC,GAAGV,cAAc,GAAG,CAArC,EAA0C;AACtCK,UAAAA,QAAQ,GAAGH,OAAO,GAAGF,cAAV,GAA2B,CAA3B,GAA+BU,CAA1C;AACH,SAFD,MAEO,IAAKP,GAAG,IAAIJ,WAAZ,EAA0B;AAC7BK,UAAAA,cAAc;AACdC,UAAAA,QAAQ,GAAGF,GAAX;AACAA,UAAAA,GAAG,GAAGC,cAAN;AACH,SAJM,MAIA;AACHC,UAAAA,QAAQ,GAAGF,GAAX;;AACA,cAAMA,GAAG,KAAKf,OAAO,CAACU,OAAR,EAAR,IACN,MAAKR,KAAL,CAAWG,WAAX,KAA2BL,OAAO,CAACM,WAAR,EADrB,IAEN,MAAKJ,KAAL,CAAWC,YAAX,KAA4BH,OAAO,CAACI,QAAR,EAF5B,EAEiD;AAC7C;AACAmB,YAAAA,QAAQ,IAAI,MAAM1B,MAAM,CAAC2B,UAAzB;AACH,WAPE,CAQH;;;AACAT,UAAAA,GAAG;AACN;;AACDK,QAAAA,EAAE,CAACK,IAAH,CAAS;AAAI,UAAA,GAAG,EAAGH,CAAV;AAAc,UAAA,SAAS,EAAEC,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAoCN,QAApC,CAAT;AACH;;AACD,aAAOG,EAAP;AACH,KAzBD;;AA2BA,QAAMM,GAAG,GAAG,SAANA,GAAM,GAAO;AACf,UAAIC,EAAE,GAAG,EAAT;;AACA,WAAM,IAAIR,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG;AAAC;AAAtB,QAAmDA,CAAC,EAApD,EAAyD;AACrDQ,QAAAA,EAAE,CAACF,IAAH,CAAS;AAAI,UAAA,GAAG,EAAEN,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAaD,GAAG,CAAEC,CAAF,CAAhB,CAAT;AACH;;AACD,aAASQ,EAAT;AACH,KAND;;AAzDoB;AAiEpB,G,CAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;6BAEY;AACL,aAEC;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM,KAAKD,GAAL,EADN,CADJ,CADJ,CADJ,CAFD;AAYN;;;;EAnJ0B/B,KAAK,CAACiC,S;;AAsJjC9B,YAAY,CAAC+B,SAAb,GAAyB;AACrB;AAEAC,EAAAA,IAAI,EAAElC,SAAS,CAACmC;AAHK,CAAzB;AAMAjC,YAAY,CAACkC,YAAb,GAA4B;AACxBF,EAAAA,IAAI,EAAE;AADkB,CAA5B;AAIA,eAAehC,YAAf","sourcesContent":["\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\n\nclass CalendarBody extends React.Component {\n    constructor(props) {\n      super(props);\n      let newDate = new Date();\n      this.state = {\n              currentMonth: newDate.getMonth(), \n                currentYear: newDate.getFullYear()\n\n    }\n           \n    // let currentMonth = newDate.getMonth();\n    // let currentYear = newDate.getFullYear();\n\nlet getDaysInMonth = function( month, year ) {\n   return new Date( year, month, 0 ).getDate();\n};\n\nlet daysInMonth = getDaysInMonth(\n   this.state.currentMonth + 1,\n  this.state.currentYear\n);\n\nlet firstDayOfWeek = new Date(\n    this.state.currentYear,\n    this.state.currentMonth ).getDay();\n\n\nlet lastDay = new Date( this.state.currentYear,  this.state.currentMonth, 0 ).getDate();\n   let day = 1;\n   let dayOfNextMonth = 0;\n   let cellText;\n   const tds = ( i )  => {\n       let td = [];\n       const baseDayClass = 'basis class';\n       for ( let y = 0; y < 7; y++ ) {\n           let dayClass = baseDayClass;\n           if ( i === 0 && y < firstDayOfWeek - 1  ) {\n               cellText = lastDay - firstDayOfWeek + 2 + y;\n           } else if ( day >= daysInMonth ) {\n               dayOfNextMonth++;\n               cellText = day;\n               day = dayOfNextMonth;\n           } else {\n               cellText = day;\n               if (  day === newDate.getDate() &&\n               this.state.currentYear === newDate.getFullYear() &&\n               this.state.currentMonth === newDate.getMonth() ) {\n                   //day;\n                   dayClass += ' ' + styles.actualDate;\n               }\n               //cellText = day;\n               day++;\n           }\n           td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n       }\n       return td;\n   };\n\n   const trs = ()  => {\n       let tr = [];\n       for ( let i = 0; i < 6/** && day <= daysInMonth*/; i++ ) {\n           tr.push( <tr key={i}>{tds( i )}</tr> );\n       }\n       return   tr;\n   };\n\n  }\n\n\n// const CalendarBody = (props) => {\n// let newDate = new Date();\n// //   super(props);\n// //    this.state = {\n// //        date: newDate.getDate(),\n// //        currentMonth: newDate.getMonth(), \n// //        currentYear: newDate.getFullYear()\n// //     }\n//     //let date = newDate.getDate();\n//    let currentMonth = newDate.getMonth();\n//      let currentYear = newDate.getFullYear();\n\n// let getDaysInMonth = function( month, year ) {\n//     return new Date( year, month, 0 ).getDate();\n// };\n\n// let daysInMonth = getDaysInMonth(\n//     /*this.state.*/currentMonth + 1,\n//    /*this.state.*/currentYear\n// );\n\n// let firstDayOfWeek = new Date(\n//      /*this.state.*/currentYear,\n//      /*this.state.*/ currentMonth ).getDay();\n\n\n// let lastDay = new Date(  /*this.state.*/currentYear,  /*this.state.*/currentMonth, 0 ).getDate();\n//     let day = 1;\n//     let dayOfNextMonth = 0;\n//     let cellText;\n//     const tds = ( i )  => {\n//         let td = [];\n//         const baseDayClass = 'basis class';\n//         for ( let y = 0; y < 7; y++ ) {\n//             let dayClass = baseDayClass;\n//             if ( i === 0 && y < firstDayOfWeek - 1  ) {\n//                 cellText = lastDay - firstDayOfWeek + 2 + y;\n//             } else if ( day >= daysInMonth ) {\n//                 dayOfNextMonth++;\n//                 cellText = day;\n//                 day = dayOfNextMonth;\n//             } else {\n//                 cellText = day;\n//                 if (  day === newDate.getDate() &&\n//                  /*this.state.*/currentYear === newDate.getFullYear() &&\n//                  /*this.state.*/currentMonth === newDate.getMonth() ) {\n//                     //day;\n//                     dayClass += ' ' + styles.actualDate;\n//                 }\n//                 //cellText = day;\n//                 day++;\n//             }\n//             td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n//         }\n//         return td;\n//     };\n\n//     const trs = ()  => {\n//         let tr = [];\n//         for ( let i = 0; i < 6/** && day <= daysInMonth*/; i++ ) {\n//             tr.push( <tr key={i}>{tds( i )}</tr> );\n//         }\n//         return   tr;\n//     };\n\n   render() {\n       return (\n\n        <div className=\"row\">\n            <div>\n                <table>\n                    <tbody>\n                        { this.trs() }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n}\n\nCalendarBody.propTypes = {\n    /** Description of prop \"text\". */\n\n    text: PropTypes.string\n};\n\nCalendarBody.defaultProps = {\n    text: 'defaultText'\n};\n\nexport default CalendarBody;\n"]},"metadata":{},"sourceType":"module"}