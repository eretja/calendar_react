{"ast":null,"code":"var _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./calendarBody.scss\";\nimport Button from \"ui/buttons/Button\";\n\nvar CalendarBody = function CalendarBody(props) {\n  var _props$state = props.state,\n      year = _props$state.year,\n      month = _props$state.month,\n      date = _props$state.date;\n  var daysInMonth = new Date(year, month + 1, 0).getDate();\n  var firstDayOfWeek = new Date(year, month).getDay();\n  var lastDay = new Date(year, month, 0).getDate();\n  var day = 1;\n  var dayOfNextMonth = 0;\n  var cellText;\n\n  var tds = function tds(i, date) {\n    var td = [];\n    var baseDayClass = \"basis class\";\n\n    for (var y = 0; y < 7; y++) {\n      var dayClass = baseDayClass;\n\n      if (i === 0 && y < firstDayOfWeek - 1) {\n        cellText = lastDay - firstDayOfWeek + 2 + y;\n        dayClass += \" \" + styles.calendarNextMonth;\n      } else if (day >= daysInMonth) {\n        dayOfNextMonth++;\n        dayClass += \" \" + styles.calendarNextMonth;\n        cellText = day;\n        day = dayOfNextMonth;\n      } else {\n        cellText = day;\n\n        if (day === date.getDate() && year === date.getFullYear() && month === date.getMonth()) {\n          dayClass += \" \" + styles.actualDate;\n        }\n\n        day++;\n      }\n\n      td.push(React.createElement(\"td\", {\n        key: y,\n        className: dayClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, cellText));\n    }\n\n    return td;\n  };\n\n  var trs = function trs(date) {\n    var tr = [];\n\n    for (var i = 0; i < 5; i++) {\n      tr.push(React.createElement(\"tr\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, tds(i, date)));\n    }\n\n    return tr;\n  };\n\n  return React.createElement(\"div\", {\n    className: \"calendarBody\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, trs(props.date))));\n}; //}\n\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBody.defaultProps = {\n  text: \"\"\n};\nexport default CalendarBody;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx"],"names":["React","PropTypes","styles","Button","CalendarBody","props","state","year","month","date","daysInMonth","Date","getDate","firstDayOfWeek","getDay","lastDay","day","dayOfNextMonth","cellText","tds","i","td","baseDayClass","y","dayClass","calendarNextMonth","getFullYear","getMonth","actualDate","push","trs","tr","propTypes","text","string","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./calendarBody.scss\";\nimport Button from \"ui/buttons/Button\";\n\nconst CalendarBody = props => {\n  let { year, month, date } = props.state;\n\n  let daysInMonth = new Date(year, month + 1, 0).getDate();\n\n  let firstDayOfWeek = new Date(year, month).getDay();\n\n  let lastDay = new Date(year, month, 0).getDate();\n  let day = 1;\n  let dayOfNextMonth = 0;\n  let cellText;\n  const tds = (i, date) => {\n    let td = [];\n    const baseDayClass = \"basis class\";\n    for (let y = 0; y < 7; y++) {\n      let dayClass = baseDayClass;\n      if (i === 0 && y < firstDayOfWeek - 1) {\n        cellText = lastDay - firstDayOfWeek + 2 + y;\n        dayClass += \" \" + styles.calendarNextMonth;\n      } else if (day >= daysInMonth) {\n        dayOfNextMonth++;\n        dayClass += \" \" + styles.calendarNextMonth;\n        cellText = day;\n        day = dayOfNextMonth;\n      } else {\n        cellText = day;\n        if (\n          day === date.getDate() &&\n          year === date.getFullYear() &&\n          month === date.getMonth()\n        ) {\n          dayClass += \" \" + styles.actualDate;\n        }\n        day++;\n      }\n      td.push(\n        <td key={y} className={dayClass}>\n          {cellText}\n        </td>\n      );\n    }\n    return td;\n  };\n  const trs = date => {\n    let tr = [];\n    for (let i = 0; i < 5; i++) {\n      tr.push(<tr key={i}>{tds(i, date)}</tr>);\n    }\n    return tr;\n  };\n\n  return (\n    <div className=\"calendarBody\">\n      <table>\n        <tbody>{trs(props.date)}</tbody>\n      </table>\n      {/* <Button text='Add an Event'/>  */}\n    </div>\n  );\n};\n//}\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n\n  text: PropTypes.string\n};\n\nCalendarBody.defaultProps = {\n  text: \"\"\n};\n\nexport default CalendarBody;\n"]},"metadata":{},"sourceType":"module"}