{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx\";\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\nvar newDate = new Date(); // this.state = {\n//     date: newDate.getDate(),\n//     currentMonth: newDate.getMonth(), \n//     currentYear: newDate.getFullYear()\n//   }\n\nvar getDaysInMonth = function getDaysInMonth(month, year) {\n  return new Date(year, month, 0).getDate();\n};\n\nvar daysInMonth = getDaysInMonth(this.state.currentMonth + 1, this.state.currentYear);\nvar firstDayOfWeek = new Date(this.state.currentYear, this.state.currentMonth).getDay();\nvar lastDay = new Date(this.state.currentYear, this.state.currentMonth, 0).getDate(); // console.log( 'currentYear', currentYear );\n// console.log( 'currentMonth', currentMonth );\n// console.log( 'daysInMonth', daysInMonth );\n// console.log( 'firstDayOfWeek', firstDayOfWeek );\n// console.log( 'lastDay', lastDay );\n// console.log( 'newDate', newDate );\n// console.log( 'date', date );\n\nvar CalendarBody = function CalendarBody() {\n  var day = 1;\n  var dayOfNextMonth = 0;\n  var cellText;\n\n  var tds = function tds(i) {\n    var td = [];\n    var baseDayClass = 'basis class';\n\n    for (var y = 0; y < 7; y++) {\n      var dayClass = baseDayClass;\n\n      if (i === 0 && y < firstDayOfWeek - 1) {\n        cellText = lastDay - firstDayOfWeek + 2 + y;\n        console.log(1, lastDay - firstDayOfWeek + 2 + y, cellText);\n      } else if (day >= daysInMonth) {\n        dayOfNextMonth++;\n        cellText = day;\n        day = dayOfNextMonth;\n      } else {\n        cellText = day;\n\n        if (day === newDate.getDate() && _this.state.currentYear === newDate.getFullYear() && _this.state.currentMonth === newDate.getMonth()) {\n          //day;\n          dayClass += ' ' + styles.actualDate;\n        } //cellText = day;\n\n\n        day++;\n      }\n\n      td.push(React.createElement(\"td\", {\n        key: y,\n        className: dayClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, cellText));\n    }\n\n    return td;\n  };\n\n  var trs = function trs() {\n    var tr = [];\n\n    for (var i = 0; i < 6\n    /** && day <= daysInMonth*/\n    ; i++) {\n      tr.push(React.createElement(\"tr\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, tds(i)));\n    }\n\n    return tr;\n  };\n\n  return React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, trs()))));\n};\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBody.defaultProps = {\n  text: 'defaultText'\n};\nexport default CalendarBody;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx"],"names":["React","PropTypes","styles","newDate","Date","getDaysInMonth","month","year","getDate","daysInMonth","state","currentMonth","currentYear","firstDayOfWeek","getDay","lastDay","CalendarBody","day","dayOfNextMonth","cellText","tds","i","td","baseDayClass","y","dayClass","console","log","getFullYear","getMonth","actualDate","push","trs","tr","propTypes","text","string","defaultProps"],"mappings":"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","sourcesContent":["\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\n\nlet newDate = new Date();\n// this.state = {\n//     date: newDate.getDate(),\n//     currentMonth: newDate.getMonth(), \n//     currentYear: newDate.getFullYear()\n//   }\n\nlet getDaysInMonth = function( month, year ) {\n    return new Date( year, month, 0 ).getDate();\n};\n\nlet daysInMonth = getDaysInMonth(\n    this.state.currentMonth + 1,\n    this.state.currentYear\n);\n\nlet firstDayOfWeek = new Date(\n    this.state.currentYear,\n    this.state.currentMonth ).getDay();\n\n\nlet lastDay = new Date( this.state.currentYear, this.state.currentMonth, 0 ).getDate();\n\n// console.log( 'currentYear', currentYear );\n// console.log( 'currentMonth', currentMonth );\n// console.log( 'daysInMonth', daysInMonth );\n// console.log( 'firstDayOfWeek', firstDayOfWeek );\n// console.log( 'lastDay', lastDay );\n// console.log( 'newDate', newDate );\n// console.log( 'date', date );\n\nconst CalendarBody = ( ) => {\n    let day = 1;\n    let dayOfNextMonth = 0;\n    let cellText;\n    const tds = ( i )  => {\n        let td = [];\n        const baseDayClass = 'basis class';\n        for ( let y = 0; y < 7; y++ ) {\n            let dayClass = baseDayClass;\n            if ( i === 0 && y < firstDayOfWeek - 1  ) {\n                cellText = lastDay - firstDayOfWeek + 2 + y;\n                console.log( 1, lastDay - firstDayOfWeek + 2 + y, cellText );\n            } else if ( day >= daysInMonth ) {\n                dayOfNextMonth++;\n                cellText = day;\n                day = dayOfNextMonth;\n            } else {\n                cellText = day;\n                if (  day === newDate.getDate() &&\n                this.state.currentYear === newDate.getFullYear() &&\n                this.state.currentMonth === newDate.getMonth() ) {\n                    //day;\n                    dayClass += ' ' + styles.actualDate;\n                }\n                //cellText = day;\n                day++;\n            }\n            td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n        }\n        return td;\n    };\n\n    const trs = ()  => {\n        let tr = [];\n        for ( let i = 0; i < 6/** && day <= daysInMonth*/; i++ ) {\n            tr.push( <tr key={i}>{tds( i )}</tr> );\n        }\n        return   tr;\n    };\n\n    return (\n\n        <div className=\"row\">\n            <div>\n                <table>\n                    <tbody>\n                        { trs() }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\n\nCalendarBody.propTypes = {\n    /** Description of prop \"text\". */\n\n    text: PropTypes.string\n};\n\nCalendarBody.defaultProps = {\n    text: 'defaultText'\n};\n\nexport default CalendarBody;\n"]},"metadata":{},"sourceType":"module"}