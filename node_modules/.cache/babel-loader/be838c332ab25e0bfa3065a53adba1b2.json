{"ast":null,"code":"var _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\nvar newDate = new Date();\nvar date = newDate.getDate();\nvar currentMonth = newDate.getMonth();\nvar currentYear = newDate.getFullYear();\n\nvar getDaysInMonth = function getDaysInMonth(month, year) {\n  console.log(1, new Date(year, month, 0), month, year);\n  return new Date(year, month, 0).getDate();\n};\n\nvar daysInMonth = getDaysInMonth(currentMonth + 1, currentYear);\nvar firstDayOfWeek = new Date(currentYear, currentMonth).getDay();\nvar lastDay = new Date(currentYear, currentMonth, 0).getDate();\nconsole.log('currentYear', currentYear);\nconsole.log('currentMonth', currentMonth);\nconsole.log('daysInMonth', daysInMonth);\nconsole.log('firstDayOfWeek', firstDayOfWeek);\nconsole.log('lastDay', lastDay);\nconsole.log('newDate', newDate);\nconsole.log('date', date);\nvar cellText = [];\n\nvar CalendarBody = function CalendarBody() {\n  var currentDay = 1;\n  var dayOfNextMonth = 1;\n\n  var tds = function tds() {\n    var td = [];\n\n    for (var y = 0; y < 7; y++) {\n      td.push(React.createElement(\"td\", {\n        key: y,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, cellText));\n      cellText++;\n\n      if (daysInMonth < cellText) {\n        cellText = dayOfNextMonth;\n        dayOfNextMonth++;\n      } else if (cellText < firstDayOfWeek - 1) {\n        cellText;\n      }\n    }\n\n    return td;\n  };\n\n  var trs = function trs() {\n    var tr = []; // for ( let i = 0; i < 6 && currentDay <= daysInMonth; i++ ) {\n\n    for (var i = 0; i < 5 && currentDay <= daysInMonth; i++) {\n      tr.push(React.createElement(\"tr\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, tds()));\n    }\n\n    return tr;\n  };\n\n  return React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, trs()))));\n};\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBody.defaultProps = {\n  text: 'defaultText'\n};\nexport default CalendarBody;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx"],"names":["React","PropTypes","styles","newDate","Date","date","getDate","currentMonth","getMonth","currentYear","getFullYear","getDaysInMonth","month","year","console","log","daysInMonth","firstDayOfWeek","getDay","lastDay","cellText","CalendarBody","currentDay","dayOfNextMonth","tds","td","y","push","trs","tr","i","propTypes","text","string","defaultProps"],"mappings":";AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,IAAIC,OAAO,GAAG,IAAIC,IAAJ,EAAd;AAEA,IAAIC,IAAI,GAAGF,OAAO,CAACG,OAAR,EAAX;AAEA,IAAIC,YAAY,GAAGJ,OAAO,CAACK,QAAR,EAAnB;AAEA,IAAIC,WAAW,GAAGN,OAAO,CAACO,WAAR,EAAlB;;AAEA,IAAIC,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,KAAV,EAAiBC,IAAjB,EAAwB;AACzCC,EAAAA,OAAO,CAACC,GAAR,CAAa,CAAb,EAAgB,IAAIX,IAAJ,CAAUS,IAAV,EAAgBD,KAAhB,EAAuB,CAAvB,CAAhB,EAA6CA,KAA7C,EAAoDC,IAApD;AACA,SAAO,IAAIT,IAAJ,CAAUS,IAAV,EAAgBD,KAAhB,EAAuB,CAAvB,EAA2BN,OAA3B,EAAP;AACH,CAHD;;AAKA,IAAIU,WAAW,GAAGL,cAAc,CAC5BJ,YAAY,GAAG,CADa,EAE5BE,WAF4B,CAAhC;AAKA,IAAIQ,cAAc,GAAG,IAAIb,IAAJ,CACjBK,WADiB,EAEjBF,YAFiB,EAEFW,MAFE,EAArB;AAKA,IAAIC,OAAO,GAAG,IAAIf,IAAJ,CAAUK,WAAV,EAAuBF,YAAvB,EAAqC,CAArC,EAAyCD,OAAzC,EAAd;AAEAQ,OAAO,CAACC,GAAR,CAAa,aAAb,EAA4BN,WAA5B;AACAK,OAAO,CAACC,GAAR,CAAa,cAAb,EAA6BR,YAA7B;AACAO,OAAO,CAACC,GAAR,CAAa,aAAb,EAA4BC,WAA5B;AACAF,OAAO,CAACC,GAAR,CAAa,gBAAb,EAA+BE,cAA/B;AACAH,OAAO,CAACC,GAAR,CAAa,SAAb,EAAwBI,OAAxB;AACAL,OAAO,CAACC,GAAR,CAAa,SAAb,EAAwBZ,OAAxB;AACAW,OAAO,CAACC,GAAR,CAAa,MAAb,EAAqBV,IAArB;AAEA,IAAIe,QAAQ,GAAG,EAAf;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAO;AACxB,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,cAAc,GAAG,CAArB;;AACA,MAAMC,GAAG,GAAG,SAANA,GAAM,GAAQ;AAChB,QAAIC,EAAE,GAAG,EAAT;;AACA,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA8B;AAC1BD,MAAAA,EAAE,CAACE,IAAH,CAAS;AAAI,QAAA,GAAG,EAAGD,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAeN,QAAf,CAAT;AACAA,MAAAA,QAAQ;;AACR,UAAKJ,WAAW,GAAGI,QAAnB,EAA8B;AAC1BA,QAAAA,QAAQ,GAAGG,cAAX;AACAA,QAAAA,cAAc;AACjB,OAHD,MAGO,IAAKH,QAAQ,GAAGH,cAAc,GAAG,CAAjC,EAAqC;AACxCG,QAAAA,QAAQ;AACX;AAEJ;;AAGD,WAAOK,EAAP;AACH,GAhBD;;AAkBA,MAAMG,GAAG,GAAG,SAANA,GAAM,GAAO;AACf,QAAIC,EAAE,GAAG,EAAT,CADe,CAEf;;AACA,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAG,CAAJ,IAASR,UAAU,IAAIN,WAAxC,EAAqDc,CAAC,EAAtD,EAA2D;AACvDD,MAAAA,EAAE,CAACF,IAAH,CAAS;AAAI,QAAA,GAAG,EAAEG,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAaN,GAAG,EAAhB,CAAT;AACH;;AAED,WAASK,EAAT;AACH,GARD;;AASA,SAEI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMD,GAAG,EADT,CADJ,CADJ,CADJ,CAFJ;AAYH,CA1CD;;AA6CAP,YAAY,CAACU,SAAb,GAAyB;AACrB;AAEAC,EAAAA,IAAI,EAAE/B,SAAS,CAACgC;AAHK,CAAzB;AAMAZ,YAAY,CAACa,YAAb,GAA4B;AACxBF,EAAAA,IAAI,EAAE;AADkB,CAA5B;AAIA,eAAeX,YAAf","sourcesContent":["\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\n\nlet newDate = new Date();\n\nlet date = newDate.getDate();\n\nlet currentMonth = newDate.getMonth();\n\nlet currentYear = newDate.getFullYear();\n\nlet getDaysInMonth = function( month, year ) {\n    console.log( 1, new Date( year, month, 0 ),  month, year  );\n    return new Date( year, month, 0 ).getDate();\n};\n\nlet daysInMonth = getDaysInMonth(\n    currentMonth + 1,\n    currentYear\n);\n\nlet firstDayOfWeek = new Date(\n    currentYear,\n    currentMonth ).getDay();\n\n\nlet lastDay = new Date( currentYear, currentMonth, 0 ).getDate();\n\nconsole.log( 'currentYear', currentYear );\nconsole.log( 'currentMonth', currentMonth );\nconsole.log( 'daysInMonth', daysInMonth );\nconsole.log( 'firstDayOfWeek', firstDayOfWeek );\nconsole.log( 'lastDay', lastDay );\nconsole.log( 'newDate', newDate );\nconsole.log( 'date', date );\n\nlet cellText = [];\nconst CalendarBody = ( ) => {\n    let currentDay = 1;\n    let dayOfNextMonth = 1;\n    const tds = ( )  => {\n        let td = [];\n        for ( let y = 0; y < 7; y++ ) {\n            td.push( <td key={ y }>{cellText}</td> );\n            cellText++;\n            if ( daysInMonth < cellText ) {\n                cellText = dayOfNextMonth;\n                dayOfNextMonth++;\n            } else if ( cellText < firstDayOfWeek - 1 ) {\n                cellText;\n            }\n            \n        }\n\n        \n        return td;\n    };\n\n    const trs = ()  => {\n        let tr = [];\n        // for ( let i = 0; i < 6 && currentDay <= daysInMonth; i++ ) {\n        for ( let i = 0; i < 5 && currentDay <= daysInMonth; i++ ) {\n            tr.push( <tr key={i}>{tds( )}</tr> );\n        }\n\n        return   tr;\n    };\n    return (\n\n        <div className=\"row\">\n            <div>\n                <table>\n                    <tbody>\n                        { trs() }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\n\nCalendarBody.propTypes = {\n    /** Description of prop \"text\". */\n\n    text: PropTypes.string\n};\n\nCalendarBody.defaultProps = {\n    text: 'defaultText'\n};\n\nexport default CalendarBody;\n"]},"metadata":{},"sourceType":"module"}