{"ast":null,"code":"/* import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\n class CalendarBodyTest extends React.Component {\n   constructor(props) {\n      super(props);\n     let newDate = new Date();\n      this.state = {\n             currentMonth: newDate.getMonth(), \n               currentYear: newDate.getFullYear()\n    };\n   this.calendarBody = this.calendarBody.bind(this);\nlet getDaysInMonth = function( month, year ) {\n   return new Date( year, month, 0 ).getDate();\n};\n let daysInMonth = getDaysInMonth(\n   this.state.currentMonth + 1,\n  this.state.currentYear\n);\n let firstDayOfWeek = new Date(\n    this.state.currentYear,\n    this.state.currentMonth ).getDay();\n\nlet lastDay = new Date( this.state.currentYear,  this.state.currentMonth, 0 ).getDate();\nfunction calendarBody(){\n    let  currentDay = 1;\n   let dayOfNextMonth = 0;\n   let cellText;\n \n    for ( let i = 0; i < 6 && currentDay <= daysInMonth; i++ ) {\n       let dayClass = baseDayClass;\n       for ( let j = 0; j < 7; j++ ) {\n           tr.push( <tr key={i}>{td}</tr> );\n            if ( i === 0 && j < firstDayOfWeek - 1 ) {\n               cellText = lastDay - firstDayOfWeek + 2 + j;\n           } else if ( currentDay > daysInMonth ) {\n               dayOfNextMonth++;\n               cellText = dayOfNextMonth;\n           } else {\n               cellText = currentDay;\n               if ( currentDay === newDate.getDate() &&\n                currentYear === newDate.getFullYear() &&\n                 currentMonth === newDate.getMonth() ) {\n                   dayClass += ' ' + styles.actualDate;\n                }\n                currentDay++;\n           }\n \n       }\n        td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n   }\n\n }\n}\n  render() {\n    return (\n      <div className=\"calendarBody\">\n         <div>\n             <table>\n             <tbody>\n                       {calendarBody()} \n                   </tbody>\n            </table>\n         </div>\n    </div>\n );\n};\n}\nCalendarBodyTest.propTypes = {\nDescription of prop \"text\". \n  text: PropTypes.string\n};\nCalendarBodyTest.defaultProps = {\n text: 'defaultText'\n};\nexport default CalendarBodyTest;\n*/","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBodyTest.jsx"],"names":[],"mappings":"AAAC","sourcesContent":[" /* import React from 'react';\n import PropTypes from 'prop-types';\n import styles from './calendarBody.scss';\n\n class CalendarBodyTest extends React.Component {\n    constructor(props) {\n       super(props);\n      let newDate = new Date();\n       this.state = {\n              currentMonth: newDate.getMonth(), \n                currentYear: newDate.getFullYear()\n\n    };\n    this.calendarBody = this.calendarBody.bind(this);\n let getDaysInMonth = function( month, year ) {\n    return new Date( year, month, 0 ).getDate();\n };\n\n let daysInMonth = getDaysInMonth(\n    this.state.currentMonth + 1,\n   this.state.currentYear\n );\n\n let firstDayOfWeek = new Date(\n     this.state.currentYear,\n     this.state.currentMonth ).getDay();\n\n\n let lastDay = new Date( this.state.currentYear,  this.state.currentMonth, 0 ).getDate();\nfunction calendarBody(){\n\n    let  currentDay = 1;\n    let dayOfNextMonth = 0;\n    let cellText;\n  \n\n    for ( let i = 0; i < 6 && currentDay <= daysInMonth; i++ ) {\n        let dayClass = baseDayClass;\n        for ( let j = 0; j < 7; j++ ) {\n            tr.push( <tr key={i}>{td}</tr> );\n\n            if ( i === 0 && j < firstDayOfWeek - 1 ) {\n                cellText = lastDay - firstDayOfWeek + 2 + j;\n            } else if ( currentDay > daysInMonth ) {\n                dayOfNextMonth++;\n                cellText = dayOfNextMonth;\n            } else {\n                cellText = currentDay;\n                if ( currentDay === newDate.getDate() &&\n                 currentYear === newDate.getFullYear() &&\n                  currentMonth === newDate.getMonth() ) {\n                    dayClass += ' ' + styles.actualDate;\n                 }\n\n                currentDay++;\n            }\n  \n        }\n\n        td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n    }\n\n\n  }\n}\n   render() {\n     return (\n\n      <div className=\"calendarBody\">\n          <div>\n              <table>\n              <tbody>\n                        {calendarBody()} \n                    </tbody>\n             </table>\n          </div>\n     </div>\n  );\n };\n }\n\nCalendarBodyTest.propTypes = {\n Description of prop \"text\". \n\n  text: PropTypes.string\n };\n\nCalendarBodyTest.defaultProps = {\n  text: 'defaultText'\n };\n export default CalendarBodyTest;\n*/"]},"metadata":{},"sourceType":"module"}