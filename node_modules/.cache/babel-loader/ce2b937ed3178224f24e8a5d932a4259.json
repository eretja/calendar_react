{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\nimport Button from 'ui/buttons/Button';\nimport state from \"./../Data/state\"; // const CalendarBody = (props) => {\n//  let newDate = new Date();\n//    let currentMonth = newDate.getMonth();\n//      let currentYear = newDate.getFullYear();\n//  let getDaysInMonth = function( month, year ) {\n//      return new Date( year, month, 0 ).getDate();\n//  };\n//  let daysInMonth = getDaysInMonth(\n//    currentMonth + 1,\n//   currentYear\n// );\n//  let firstDayOfWeek = new Date(\n//      currentYear,\n//       currentMonth ).getDay();\n//  let lastDay = new Date(  currentYear,  currentMonth, 0 ).getDate();\n//      let day = 1;\n//      let dayOfNextMonth = 0;\n//      let cellText;\n//      const tds = ( i, currentDate )  => {\n//          let td = [];\n//          const baseDayClass = 'basis class';\n//          for ( let y = 0; y < 7; y++ ) {\n//             let dayClass = baseDayClass;\n//              if ( i === 0 && y < firstDayOfWeek - 1  ) {\n//                  cellText = lastDay - firstDayOfWeek + 2 + y;\n//                  dayClass += ' ' + styles.calendarNextMonth;\n//              } else if ( day >= daysInMonth ) {\n//                  dayOfNextMonth++;\n//                  dayClass += ' ' + styles.calendarNextMonth;\n//                  cellText = day;\n//                 day = dayOfNextMonth; \n//             } else {\n//                  cellText = day;\n//                  if (  day === currentDate.getDate() &&\n//                  currentYear === currentDate.getFullYear() &&\n//                   currentMonth === currentDate.getMonth() ) {\n//                    dayClass += ' ' + styles.actualDate;\n//                  }\n//                  day++;\n//              }\n//               //console.log( i, y, dayClass, typeof dayClass );\n//              td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n//          }\n//          return td;\n//      };\n//      const trs = (currentDate)  => {\n//          let tr = [];\n//          for ( let i = 0; i < 5; i++ ) {\n//              tr.push( <tr key={i}>{tds( i, currentDate )}</tr> );\n//          }\n//          return   tr;\n//      };\n//      const setOnClickDay = () =>{\n//         this.addActiveClass= this.addActiveClass.bind(this);\n//         const calendar = document.getElementsByClassName(\"calendar__weekdays\");\n//         for (let i = 0; i < calendar.length; i++) {\n//           calendar[i].addEventListener(\"click\", function() {\n//             for (let j = 0; j < calendar.length; j++) {\n//               if (calendar[j] === this) {\n//                 calendar[j].classList.add(\"calendar__weekdays--activeDay\");\n//                 let setData = new Event(\"displayEventDetails\");\n//                 const element = document.getElementById(\"event\");\n//                 element.dispatchEvent(setData);\n//               } else {\n//                 calendar[j].classList.remove(\"calendar__weekdays--activeDay\");\n//               }\n//             }\n//           });\n//         }\n//     }\n//      //console.log( 'new Date()', new Date(), typeof new Date(), new Date().toISOString() );\n//        return (\n//         <div className=\"calendarBody\">\n//             <div>\n//                 <table>\n//                     <tbody>\n//                         {trs(props.currentDate) }\n//                     </tbody>\n//                 </table>\n//             </div>\n//             <Button text='Add an Event'/> \n//         </div>\n//     );\n// };\n//}\n\nCalendarBody.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBody.defaultProps = {\n  text: ''\n};\nexport default CalendarBody;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBody.jsx"],"names":["React","PropTypes","styles","Button","state","CalendarBody","propTypes","text","string","defaultProps"],"mappings":"AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,iBAAlB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,YAAY,CAACC,SAAb,GAAyB;AACrB;AAEAC,EAAAA,IAAI,EAAEN,SAAS,CAACO;AAHK,CAAzB;AAMAH,YAAY,CAACI,YAAb,GAA4B;AACxBF,EAAAA,IAAI,EAAC;AADmB,CAA5B;AAIA,eAAeF,YAAf","sourcesContent":["\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\nimport Button from 'ui/buttons/Button';\nimport state from \"./../Data/state\";\n\n// const CalendarBody = (props) => {\n//  let newDate = new Date();\n//    let currentMonth = newDate.getMonth();\n//      let currentYear = newDate.getFullYear();\n\n//  let getDaysInMonth = function( month, year ) {\n//      return new Date( year, month, 0 ).getDate();\n//  };\n\n//  let daysInMonth = getDaysInMonth(\n//    currentMonth + 1,\n//   currentYear\n// );\n\n//  let firstDayOfWeek = new Date(\n//      currentYear,\n//       currentMonth ).getDay();\n\n\n//  let lastDay = new Date(  currentYear,  currentMonth, 0 ).getDate();\n//      let day = 1;\n//      let dayOfNextMonth = 0;\n//      let cellText;\n//      const tds = ( i, currentDate )  => {\n//          let td = [];\n//          const baseDayClass = 'basis class';\n//          for ( let y = 0; y < 7; y++ ) {\n//             let dayClass = baseDayClass;\n//              if ( i === 0 && y < firstDayOfWeek - 1  ) {\n//                  cellText = lastDay - firstDayOfWeek + 2 + y;\n//                  dayClass += ' ' + styles.calendarNextMonth;\n//              } else if ( day >= daysInMonth ) {\n//                  dayOfNextMonth++;\n//                  dayClass += ' ' + styles.calendarNextMonth;\n//                  cellText = day;\n//                 day = dayOfNextMonth; \n                \n//             } else {\n//                  cellText = day;\n//                  if (  day === currentDate.getDate() &&\n//                  currentYear === currentDate.getFullYear() &&\n//                   currentMonth === currentDate.getMonth() ) {\n//                    dayClass += ' ' + styles.actualDate;\n                    \n//                  }\n//                  day++;\n//              }\n//               //console.log( i, y, dayClass, typeof dayClass );\n//              td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n//          }\n//          return td;\n//      };\n\n//      const trs = (currentDate)  => {\n//          let tr = [];\n//          for ( let i = 0; i < 5; i++ ) {\n//              tr.push( <tr key={i}>{tds( i, currentDate )}</tr> );\n//          }\n//          return   tr;\n         \n//      };\n//      const setOnClickDay = () =>{\n//         this.addActiveClass= this.addActiveClass.bind(this);\n//         const calendar = document.getElementsByClassName(\"calendar__weekdays\");\n    \n//         for (let i = 0; i < calendar.length; i++) {\n//           calendar[i].addEventListener(\"click\", function() {\n//             for (let j = 0; j < calendar.length; j++) {\n//               if (calendar[j] === this) {\n//                 calendar[j].classList.add(\"calendar__weekdays--activeDay\");\n//                 let setData = new Event(\"displayEventDetails\");\n//                 const element = document.getElementById(\"event\");\n//                 element.dispatchEvent(setData);\n\n    \n//               } else {\n//                 calendar[j].classList.remove(\"calendar__weekdays--activeDay\");\n//               }\n//             }\n//           });\n//         }\n\n    \n//     }\n\n     \n//      //console.log( 'new Date()', new Date(), typeof new Date(), new Date().toISOString() );\n  \n//        return (\n\n//         <div className=\"calendarBody\">\n//             <div>\n//                 <table>\n//                     <tbody>\n//                         {trs(props.currentDate) }\n//                     </tbody>\n//                 </table>\n//             </div>\n//             <Button text='Add an Event'/> \n//         </div>\n//     );\n// };\n//}\n\nCalendarBody.propTypes = {\n    /** Description of prop \"text\". */\n\n    text: PropTypes.string\n};\n\nCalendarBody.defaultProps = {\n    text:''\n};\n\nexport default CalendarBody;\n"]},"metadata":{},"sourceType":"module"}