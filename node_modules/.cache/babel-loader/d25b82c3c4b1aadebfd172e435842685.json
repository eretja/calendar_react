{"ast":null,"code":"module.exports = clipboardCopy;\n\nfunction clipboardCopy(text) {\n  // Use the Async Clipboard API when available\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(text);\n  } // ...Otherwise, use document.execCommand() fallback\n  // Put the text to copy into a <span>\n\n\n  var span = document.createElement('span');\n  span.textContent = text; // Preserve consecutive spaces and newlines\n\n  span.style.whiteSpace = 'pre'; // An <iframe> isolates the <span> from the page's styles\n\n  var iframe = document.createElement('iframe');\n  iframe.sandbox = 'allow-same-origin'; // Add the <iframe> to the page\n\n  document.body.appendChild(iframe);\n  var win = iframe.contentWindow; // Add the <span> to the <iframe>\n\n  win.document.body.appendChild(span); // Get a Selection object representing the range of text selected by the user\n\n  var selection = win.getSelection(); // Fallback for Firefox which fails to get a selection from an <iframe>\n\n  if (!selection) {\n    win = window;\n    selection = win.getSelection();\n    document.body.appendChild(span);\n  }\n\n  var range = win.document.createRange();\n  selection.removeAllRanges();\n  range.selectNode(span);\n  selection.addRange(range);\n  var success = false;\n\n  try {\n    success = win.document.execCommand('copy');\n  } catch (err) {}\n\n  selection.removeAllRanges();\n  win.document.body.removeChild(span);\n  document.body.removeChild(iframe); // The Async Clipboard API returns a promise that may reject with `undefined` so we\n  // match that here for consistency.\n\n  return success ? Promise.resolve() : Promise.reject(); // eslint-disable-line prefer-promise-reject-errors\n}","map":null,"metadata":{},"sourceType":"script"}