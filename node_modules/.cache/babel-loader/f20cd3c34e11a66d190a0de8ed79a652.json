{"ast":null,"code":"import _classCallCheck from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBodyTest.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './calendarBody.scss';\n\nvar CalendarBodyTest =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CalendarBodyTest, _React$Component);\n\n  function CalendarBodyTest(props) {\n    var _this;\n\n    _classCallCheck(this, CalendarBodyTest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CalendarBodyTest).call(this, props));\n    var newDate = new Date();\n    _this.state = {\n      currentMonth: newDate.getMonth(),\n      currentYear: newDate.getFullYear()\n    };\n\n    var getDaysInMonth = function getDaysInMonth(month, year) {\n      return new Date(year, month, 0).getDate();\n    };\n\n    var daysInMonth = getDaysInMonth(_this.state.currentMonth + 1, _this.state.currentYear);\n    var firstDayOfWeek = new Date(_this.state.currentYear, _this.state.currentMonth).getDay();\n    var lastDay = new Date(_this.state.currentYear, _this.state.currentMonth, 0).getDate();\n    var day = 1;\n    var dayOfNextMonth = 0;\n    var cellText;\n    var td = [];\n    var tr = [];\n    var baseDayClass = 'basis class';\n\n    for (var y = 0; y < 7; y++) {\n      var dayClass = baseDayClass;\n\n      for (var _i = 0; _i < 6; _i++) {\n        tr.push(React.createElement(\"tr\", {\n          key: _i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, _i));\n      }\n\n      if (i === 0 && y < firstDayOfWeek - 1) {\n        cellText = lastDay - firstDayOfWeek + 2 + y;\n      } else if (day >= daysInMonth) {\n        dayOfNextMonth++;\n        cellText = day;\n        day = dayOfNextMonth;\n      } else {\n        cellText = day;\n\n        if (day === newDate.getDate() && _this.state.currentYear === newDate.getFullYear() && _this.state.currentMonth === newDate.getMonth()) {\n          //day;\n          dayClass += ' ' + styles.actualDate;\n        } //cellText = day;\n\n\n        day++;\n      }\n\n      td.push(React.createElement(\"td\", {\n        key: y,\n        className: dayClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, cellText));\n    }\n\n    return _possibleConstructorReturn(_this, td);\n  }\n\n  _createClass(CalendarBodyTest, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"calendarBody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return CalendarBodyTest;\n}(React.Component);\n\nCalendarBodyTest.propTypes = {\n  /** Description of prop \"text\". */\n  text: PropTypes.string\n};\nCalendarBodyTest.defaultProps = {\n  text: 'defaultText'\n};\nexport default CalendarBodyTest;","map":{"version":3,"sources":["/Users/kkoshulynska/work/SANDBOX/repo-calender/khrystyna-calendar/src/components/mod/calendarBody/CalendarBodyTest.jsx"],"names":["React","PropTypes","styles","CalendarBodyTest","props","newDate","Date","state","currentMonth","getMonth","currentYear","getFullYear","getDaysInMonth","month","year","getDate","daysInMonth","firstDayOfWeek","getDay","lastDay","day","dayOfNextMonth","cellText","td","tr","baseDayClass","y","dayClass","i","push","actualDate","Component","propTypes","text","string","defaultProps"],"mappings":"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","sourcesContent":[" import React from 'react';\n import PropTypes from 'prop-types';\n import styles from './calendarBody.scss';\n\n class CalendarBodyTest extends React.Component {\n    constructor(props) {\n       super(props);\n      let newDate = new Date();\n       this.state = {\n              currentMonth: newDate.getMonth(), \n                currentYear: newDate.getFullYear()\n\n    }\n\n let getDaysInMonth = function( month, year ) {\n    return new Date( year, month, 0 ).getDate();\n };\n\n let daysInMonth = getDaysInMonth(\n    this.state.currentMonth + 1,\n   this.state.currentYear\n );\n\n let firstDayOfWeek = new Date(\n     this.state.currentYear,\n     this.state.currentMonth ).getDay();\n\n\n let lastDay = new Date( this.state.currentYear,  this.state.currentMonth, 0 ).getDate();\n    let day = 1;\n    let dayOfNextMonth = 0;\n    let cellText;\n  \n        let td = [];\n        let tr = [];\n        const baseDayClass = 'basis class';\n            for ( let y = 0; y < 7; y++ ) {\n            let dayClass = baseDayClass;\n            for ( let i = 0; i < 6; i++ ) {\n                tr.push( <tr key={i}>{ i }</tr> );\n            }\n            if ( i === 0 && y < firstDayOfWeek - 1  ) {\n                cellText = lastDay - firstDayOfWeek + 2 + y;\n            } else if ( day >= daysInMonth ) {\n                dayOfNextMonth++;\n                cellText = day;\n                day = dayOfNextMonth;\n            } else {\n               cellText = day;\n                if (  day === newDate.getDate() &&\n                this.state.currentYear === newDate.getFullYear() &&\n                this.state.currentMonth === newDate.getMonth() ) {\n                    //day;\n                    dayClass += ' ' + styles.actualDate;\n                }\n                //cellText = day;\n                day++;\n            }\n            td.push( <td key={ y } className={dayClass}>{cellText}</td> );\n        }\n        return td;\n\n\n  }\n   render() {\n     return (\n\n      <div className=\"calendarBody\">\n          <div>\n              <table>\n              <tbody>\n                        { }\n                    </tbody>\n             </table>\n          </div>\n     </div>\n  );\n };\n }\n\nCalendarBodyTest.propTypes = {\n /** Description of prop \"text\". */\n\n  text: PropTypes.string\n };\n\nCalendarBodyTest.defaultProps = {\n  text: 'defaultText'\n };\n export default CalendarBodyTest;\n"]},"metadata":{},"sourceType":"module"}