"use strict";

exports.__esModule = true;
exports.convertFile = convertFile;
exports.exitError = exitError;
exports.stat = exports.readFile = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _chalk = _interopRequireDefault(require("chalk"));

var _util = _interopRequireDefault(require("util"));

var _core = _interopRequireWildcard(require("@svgr/core"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const readFile = _util.default.promisify(_fs.default.readFile);

exports.readFile = readFile;

const stat = _util.default.promisify(_fs.default.stat);

exports.stat = stat;

async function convertFile(filePath, _ref = {}) {
  let {
    config
  } = _ref,
      options = _objectWithoutPropertiesLoose(_ref, ["config"]);

  const code = await readFile(filePath, 'utf-8');
  const rcConfig = await (0, _core.resolveConfig)(filePath, config);
  return (0, _core.default)(code, _extends({}, rcConfig, options), {
    filePath
  });
}

function exitError(error) {
  console.error(_chalk.default.red(error));
  process.exit(1);
}